                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.0 #6037 (Oct 31 2010) (MINGW32)
                              4 ; This file was generated Mon Nov 23 17:14:08 2015
                              5 ;--------------------------------------------------------
                              6 	.module modbus
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _MrtuWr_PARM_6
                             13 	.globl _MrtuWr_PARM_5
                             14 	.globl _MrtuWr_PARM_4
                             15 	.globl _MrtuWr_PARM_3
                             16 	.globl _MrtuWr_PARM_2
                             17 	.globl _MrtuRd_PARM_5
                             18 	.globl _MrtuRd_PARM_4
                             19 	.globl _MrtuRd_PARM_3
                             20 	.globl _MrtuRd_PARM_2
                             21 	.globl _MrtuWrOne_PARM_5
                             22 	.globl _MrtuWrOne_PARM_4
                             23 	.globl _MrtuWrOne_PARM_3
                             24 	.globl _MrtuWrOne_PARM_2
                             25 	.globl _MrtuAnsRd_PARM_5
                             26 	.globl _MrtuAnsRd_PARM_4
                             27 	.globl _MrtuAnsRd_PARM_3
                             28 	.globl _MrtuAnsRd_PARM_2
                             29 	.globl _MrtuAnsErr_PARM_4
                             30 	.globl _MrtuAnsErr_PARM_3
                             31 	.globl _MrtuAnsErr_PARM_2
                             32 	.globl _MrtuWrCrc_PARM_2
                             33 	.globl _MrtuCrc_PARM_2
                             34 	.globl _MbLrc_PARM_2
                             35 	.globl _WrWord_PARM_2
                             36 	.globl _tabCRCLo
                             37 	.globl _tabCRCHi
                             38 	.globl _CY
                             39 	.globl _AC
                             40 	.globl _F0
                             41 	.globl _RS1
                             42 	.globl _RS0
                             43 	.globl _OV
                             44 	.globl _F1
                             45 	.globl _P
                             46 	.globl _PS
                             47 	.globl _PT1
                             48 	.globl _PX1
                             49 	.globl _PT0
                             50 	.globl _PX0
                             51 	.globl _RD
                             52 	.globl _WR
                             53 	.globl _T1
                             54 	.globl _T0
                             55 	.globl _INT1
                             56 	.globl _INT0
                             57 	.globl _TXD
                             58 	.globl _RXD
                             59 	.globl _P3_7
                             60 	.globl _P3_6
                             61 	.globl _P3_5
                             62 	.globl _P3_4
                             63 	.globl _P3_3
                             64 	.globl _P3_2
                             65 	.globl _P3_1
                             66 	.globl _P3_0
                             67 	.globl _EA
                             68 	.globl _ES
                             69 	.globl _ET1
                             70 	.globl _EX1
                             71 	.globl _ET0
                             72 	.globl _EX0
                             73 	.globl _P2_7
                             74 	.globl _P2_6
                             75 	.globl _P2_5
                             76 	.globl _P2_4
                             77 	.globl _P2_3
                             78 	.globl _P2_2
                             79 	.globl _P2_1
                             80 	.globl _P2_0
                             81 	.globl _SM0
                             82 	.globl _SM1
                             83 	.globl _SM2
                             84 	.globl _REN
                             85 	.globl _TB8
                             86 	.globl _RB8
                             87 	.globl _TI
                             88 	.globl _RI
                             89 	.globl _P1_7
                             90 	.globl _P1_6
                             91 	.globl _P1_5
                             92 	.globl _P1_4
                             93 	.globl _P1_3
                             94 	.globl _P1_2
                             95 	.globl _P1_1
                             96 	.globl _P1_0
                             97 	.globl _TF1
                             98 	.globl _TR1
                             99 	.globl _TF0
                            100 	.globl _TR0
                            101 	.globl _IE1
                            102 	.globl _IT1
                            103 	.globl _IE0
                            104 	.globl _IT0
                            105 	.globl _P0_7
                            106 	.globl _P0_6
                            107 	.globl _P0_5
                            108 	.globl _P0_4
                            109 	.globl _P0_3
                            110 	.globl _P0_2
                            111 	.globl _P0_1
                            112 	.globl _P0_0
                            113 	.globl _B
                            114 	.globl _ACC
                            115 	.globl _PSW
                            116 	.globl _IP
                            117 	.globl _P3
                            118 	.globl _IE
                            119 	.globl _P2
                            120 	.globl _SBUF
                            121 	.globl _SCON
                            122 	.globl _P1
                            123 	.globl _TH1
                            124 	.globl _TH0
                            125 	.globl _TL1
                            126 	.globl _TL0
                            127 	.globl _TMOD
                            128 	.globl _TCON
                            129 	.globl _PCON
                            130 	.globl _DPH
                            131 	.globl _DPL
                            132 	.globl _SP
                            133 	.globl _P0
                            134 	.globl _MbAnsErr_PARM_4
                            135 	.globl _MbAnsErr_PARM_3
                            136 	.globl _MbAnsErr_PARM_2
                            137 	.globl _MbAnsRd_PARM_5
                            138 	.globl _MbAnsRd_PARM_4
                            139 	.globl _MbAnsRd_PARM_3
                            140 	.globl _MbAnsRd_PARM_2
                            141 	.globl _MbWr_PARM_6
                            142 	.globl _MbWr_PARM_5
                            143 	.globl _MbWr_PARM_4
                            144 	.globl _MbWr_PARM_3
                            145 	.globl _MbWr_PARM_2
                            146 	.globl _MbWrOne_PARM_5
                            147 	.globl _MbWrOne_PARM_4
                            148 	.globl _MbWrOne_PARM_3
                            149 	.globl _MbWrOne_PARM_2
                            150 	.globl _MbRd_PARM_5
                            151 	.globl _MbRd_PARM_4
                            152 	.globl _MbRd_PARM_3
                            153 	.globl _MbRd_PARM_2
                            154 	.globl _MbWrWord_PARM_2
                            155 	.globl _MbWrByte_PARM_2
                            156 	.globl _RdWord
                            157 	.globl _WrWord
                            158 	.globl _AHex
                            159 	.globl _HexAsc
                            160 	.globl _MbRdByte
                            161 	.globl _MbRdWord
                            162 	.globl _MbWrByte
                            163 	.globl _MbWrWord
                            164 	.globl _MbWrEoT
                            165 	.globl _MbLrc
                            166 	.globl _MbRd
                            167 	.globl _MbWrOne
                            168 	.globl _MbWr
                            169 	.globl _MbAnsRd
                            170 	.globl _MbAnsErr
                            171 	.globl _MrtuCrc
                            172 	.globl _MrtuRdCrc
                            173 	.globl _MrtuWrCrc
                            174 	.globl _MrtuAnsErr
                            175 	.globl _MrtuAnsRd
                            176 	.globl _MrtuWrOne
                            177 	.globl _MrtuRd
                            178 	.globl _MrtuWr
                            179 ;--------------------------------------------------------
                            180 ; special function registers
                            181 ;--------------------------------------------------------
                            182 	.area RSEG    (ABS,DATA)
   0000                     183 	.org 0x0000
                    0080    184 G$P0$0$0 == 0x0080
                    0080    185 _P0	=	0x0080
                    0081    186 G$SP$0$0 == 0x0081
                    0081    187 _SP	=	0x0081
                    0082    188 G$DPL$0$0 == 0x0082
                    0082    189 _DPL	=	0x0082
                    0083    190 G$DPH$0$0 == 0x0083
                    0083    191 _DPH	=	0x0083
                    0087    192 G$PCON$0$0 == 0x0087
                    0087    193 _PCON	=	0x0087
                    0088    194 G$TCON$0$0 == 0x0088
                    0088    195 _TCON	=	0x0088
                    0089    196 G$TMOD$0$0 == 0x0089
                    0089    197 _TMOD	=	0x0089
                    008A    198 G$TL0$0$0 == 0x008a
                    008A    199 _TL0	=	0x008a
                    008B    200 G$TL1$0$0 == 0x008b
                    008B    201 _TL1	=	0x008b
                    008C    202 G$TH0$0$0 == 0x008c
                    008C    203 _TH0	=	0x008c
                    008D    204 G$TH1$0$0 == 0x008d
                    008D    205 _TH1	=	0x008d
                    0090    206 G$P1$0$0 == 0x0090
                    0090    207 _P1	=	0x0090
                    0098    208 G$SCON$0$0 == 0x0098
                    0098    209 _SCON	=	0x0098
                    0099    210 G$SBUF$0$0 == 0x0099
                    0099    211 _SBUF	=	0x0099
                    00A0    212 G$P2$0$0 == 0x00a0
                    00A0    213 _P2	=	0x00a0
                    00A8    214 G$IE$0$0 == 0x00a8
                    00A8    215 _IE	=	0x00a8
                    00B0    216 G$P3$0$0 == 0x00b0
                    00B0    217 _P3	=	0x00b0
                    00B8    218 G$IP$0$0 == 0x00b8
                    00B8    219 _IP	=	0x00b8
                    00D0    220 G$PSW$0$0 == 0x00d0
                    00D0    221 _PSW	=	0x00d0
                    00E0    222 G$ACC$0$0 == 0x00e0
                    00E0    223 _ACC	=	0x00e0
                    00F0    224 G$B$0$0 == 0x00f0
                    00F0    225 _B	=	0x00f0
                            226 ;--------------------------------------------------------
                            227 ; special function bits
                            228 ;--------------------------------------------------------
                            229 	.area RSEG    (ABS,DATA)
   0000                     230 	.org 0x0000
                    0080    231 G$P0_0$0$0 == 0x0080
                    0080    232 _P0_0	=	0x0080
                    0081    233 G$P0_1$0$0 == 0x0081
                    0081    234 _P0_1	=	0x0081
                    0082    235 G$P0_2$0$0 == 0x0082
                    0082    236 _P0_2	=	0x0082
                    0083    237 G$P0_3$0$0 == 0x0083
                    0083    238 _P0_3	=	0x0083
                    0084    239 G$P0_4$0$0 == 0x0084
                    0084    240 _P0_4	=	0x0084
                    0085    241 G$P0_5$0$0 == 0x0085
                    0085    242 _P0_5	=	0x0085
                    0086    243 G$P0_6$0$0 == 0x0086
                    0086    244 _P0_6	=	0x0086
                    0087    245 G$P0_7$0$0 == 0x0087
                    0087    246 _P0_7	=	0x0087
                    0088    247 G$IT0$0$0 == 0x0088
                    0088    248 _IT0	=	0x0088
                    0089    249 G$IE0$0$0 == 0x0089
                    0089    250 _IE0	=	0x0089
                    008A    251 G$IT1$0$0 == 0x008a
                    008A    252 _IT1	=	0x008a
                    008B    253 G$IE1$0$0 == 0x008b
                    008B    254 _IE1	=	0x008b
                    008C    255 G$TR0$0$0 == 0x008c
                    008C    256 _TR0	=	0x008c
                    008D    257 G$TF0$0$0 == 0x008d
                    008D    258 _TF0	=	0x008d
                    008E    259 G$TR1$0$0 == 0x008e
                    008E    260 _TR1	=	0x008e
                    008F    261 G$TF1$0$0 == 0x008f
                    008F    262 _TF1	=	0x008f
                    0090    263 G$P1_0$0$0 == 0x0090
                    0090    264 _P1_0	=	0x0090
                    0091    265 G$P1_1$0$0 == 0x0091
                    0091    266 _P1_1	=	0x0091
                    0092    267 G$P1_2$0$0 == 0x0092
                    0092    268 _P1_2	=	0x0092
                    0093    269 G$P1_3$0$0 == 0x0093
                    0093    270 _P1_3	=	0x0093
                    0094    271 G$P1_4$0$0 == 0x0094
                    0094    272 _P1_4	=	0x0094
                    0095    273 G$P1_5$0$0 == 0x0095
                    0095    274 _P1_5	=	0x0095
                    0096    275 G$P1_6$0$0 == 0x0096
                    0096    276 _P1_6	=	0x0096
                    0097    277 G$P1_7$0$0 == 0x0097
                    0097    278 _P1_7	=	0x0097
                    0098    279 G$RI$0$0 == 0x0098
                    0098    280 _RI	=	0x0098
                    0099    281 G$TI$0$0 == 0x0099
                    0099    282 _TI	=	0x0099
                    009A    283 G$RB8$0$0 == 0x009a
                    009A    284 _RB8	=	0x009a
                    009B    285 G$TB8$0$0 == 0x009b
                    009B    286 _TB8	=	0x009b
                    009C    287 G$REN$0$0 == 0x009c
                    009C    288 _REN	=	0x009c
                    009D    289 G$SM2$0$0 == 0x009d
                    009D    290 _SM2	=	0x009d
                    009E    291 G$SM1$0$0 == 0x009e
                    009E    292 _SM1	=	0x009e
                    009F    293 G$SM0$0$0 == 0x009f
                    009F    294 _SM0	=	0x009f
                    00A0    295 G$P2_0$0$0 == 0x00a0
                    00A0    296 _P2_0	=	0x00a0
                    00A1    297 G$P2_1$0$0 == 0x00a1
                    00A1    298 _P2_1	=	0x00a1
                    00A2    299 G$P2_2$0$0 == 0x00a2
                    00A2    300 _P2_2	=	0x00a2
                    00A3    301 G$P2_3$0$0 == 0x00a3
                    00A3    302 _P2_3	=	0x00a3
                    00A4    303 G$P2_4$0$0 == 0x00a4
                    00A4    304 _P2_4	=	0x00a4
                    00A5    305 G$P2_5$0$0 == 0x00a5
                    00A5    306 _P2_5	=	0x00a5
                    00A6    307 G$P2_6$0$0 == 0x00a6
                    00A6    308 _P2_6	=	0x00a6
                    00A7    309 G$P2_7$0$0 == 0x00a7
                    00A7    310 _P2_7	=	0x00a7
                    00A8    311 G$EX0$0$0 == 0x00a8
                    00A8    312 _EX0	=	0x00a8
                    00A9    313 G$ET0$0$0 == 0x00a9
                    00A9    314 _ET0	=	0x00a9
                    00AA    315 G$EX1$0$0 == 0x00aa
                    00AA    316 _EX1	=	0x00aa
                    00AB    317 G$ET1$0$0 == 0x00ab
                    00AB    318 _ET1	=	0x00ab
                    00AC    319 G$ES$0$0 == 0x00ac
                    00AC    320 _ES	=	0x00ac
                    00AF    321 G$EA$0$0 == 0x00af
                    00AF    322 _EA	=	0x00af
                    00B0    323 G$P3_0$0$0 == 0x00b0
                    00B0    324 _P3_0	=	0x00b0
                    00B1    325 G$P3_1$0$0 == 0x00b1
                    00B1    326 _P3_1	=	0x00b1
                    00B2    327 G$P3_2$0$0 == 0x00b2
                    00B2    328 _P3_2	=	0x00b2
                    00B3    329 G$P3_3$0$0 == 0x00b3
                    00B3    330 _P3_3	=	0x00b3
                    00B4    331 G$P3_4$0$0 == 0x00b4
                    00B4    332 _P3_4	=	0x00b4
                    00B5    333 G$P3_5$0$0 == 0x00b5
                    00B5    334 _P3_5	=	0x00b5
                    00B6    335 G$P3_6$0$0 == 0x00b6
                    00B6    336 _P3_6	=	0x00b6
                    00B7    337 G$P3_7$0$0 == 0x00b7
                    00B7    338 _P3_7	=	0x00b7
                    00B0    339 G$RXD$0$0 == 0x00b0
                    00B0    340 _RXD	=	0x00b0
                    00B1    341 G$TXD$0$0 == 0x00b1
                    00B1    342 _TXD	=	0x00b1
                    00B2    343 G$INT0$0$0 == 0x00b2
                    00B2    344 _INT0	=	0x00b2
                    00B3    345 G$INT1$0$0 == 0x00b3
                    00B3    346 _INT1	=	0x00b3
                    00B4    347 G$T0$0$0 == 0x00b4
                    00B4    348 _T0	=	0x00b4
                    00B5    349 G$T1$0$0 == 0x00b5
                    00B5    350 _T1	=	0x00b5
                    00B6    351 G$WR$0$0 == 0x00b6
                    00B6    352 _WR	=	0x00b6
                    00B7    353 G$RD$0$0 == 0x00b7
                    00B7    354 _RD	=	0x00b7
                    00B8    355 G$PX0$0$0 == 0x00b8
                    00B8    356 _PX0	=	0x00b8
                    00B9    357 G$PT0$0$0 == 0x00b9
                    00B9    358 _PT0	=	0x00b9
                    00BA    359 G$PX1$0$0 == 0x00ba
                    00BA    360 _PX1	=	0x00ba
                    00BB    361 G$PT1$0$0 == 0x00bb
                    00BB    362 _PT1	=	0x00bb
                    00BC    363 G$PS$0$0 == 0x00bc
                    00BC    364 _PS	=	0x00bc
                    00D0    365 G$P$0$0 == 0x00d0
                    00D0    366 _P	=	0x00d0
                    00D1    367 G$F1$0$0 == 0x00d1
                    00D1    368 _F1	=	0x00d1
                    00D2    369 G$OV$0$0 == 0x00d2
                    00D2    370 _OV	=	0x00d2
                    00D3    371 G$RS0$0$0 == 0x00d3
                    00D3    372 _RS0	=	0x00d3
                    00D4    373 G$RS1$0$0 == 0x00d4
                    00D4    374 _RS1	=	0x00d4
                    00D5    375 G$F0$0$0 == 0x00d5
                    00D5    376 _F0	=	0x00d5
                    00D6    377 G$AC$0$0 == 0x00d6
                    00D6    378 _AC	=	0x00d6
                    00D7    379 G$CY$0$0 == 0x00d7
                    00D7    380 _CY	=	0x00d7
                            381 ;--------------------------------------------------------
                            382 ; overlayable register banks
                            383 ;--------------------------------------------------------
                            384 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     385 	.ds 8
                            386 ;--------------------------------------------------------
                            387 ; internal ram data
                            388 ;--------------------------------------------------------
                            389 	.area DSEG    (DATA)
                    0000    390 LMbWrByte$bf$1$1==.
   0000                     391 _MbWrByte_PARM_2:
   0000                     392 	.ds 3
                    0003    393 LMbWrWord$bf$1$1==.
   0003                     394 _MbWrWord_PARM_2:
   0003                     395 	.ds 3
                    0006    396 LMbRd$fce$1$1==.
   0006                     397 _MbRd_PARM_2:
   0006                     398 	.ds 1
                    0007    399 LMbRd$reg$1$1==.
   0007                     400 _MbRd_PARM_3:
   0007                     401 	.ds 2
                    0009    402 LMbRd$nbr$1$1==.
   0009                     403 _MbRd_PARM_4:
   0009                     404 	.ds 2
                    000B    405 LMbRd$bf$1$1==.
   000B                     406 _MbRd_PARM_5:
   000B                     407 	.ds 3
                    000E    408 LMbWrOne$fce$1$1==.
   000E                     409 _MbWrOne_PARM_2:
   000E                     410 	.ds 1
                    000F    411 LMbWrOne$reg$1$1==.
   000F                     412 _MbWrOne_PARM_3:
   000F                     413 	.ds 2
                    0011    414 LMbWrOne$val$1$1==.
   0011                     415 _MbWrOne_PARM_4:
   0011                     416 	.ds 2
                    0013    417 LMbWrOne$bf$1$1==.
   0013                     418 _MbWrOne_PARM_5:
   0013                     419 	.ds 3
                    0016    420 LMbWr$fce$1$1==.
   0016                     421 _MbWr_PARM_2:
   0016                     422 	.ds 1
                    0017    423 LMbWr$reg$1$1==.
   0017                     424 _MbWr_PARM_3:
   0017                     425 	.ds 2
                    0019    426 LMbWr$nbr$1$1==.
   0019                     427 _MbWr_PARM_4:
   0019                     428 	.ds 2
                    001B    429 LMbWr$vals$1$1==.
   001B                     430 _MbWr_PARM_5:
   001B                     431 	.ds 3
                    001E    432 LMbWr$bf$1$1==.
   001E                     433 _MbWr_PARM_6:
   001E                     434 	.ds 3
                    0021    435 LMbWr$n$1$1==.
   0021                     436 _MbWr_n_1_1:
   0021                     437 	.ds 1
                    0022    438 LMbAnsRd$fce$1$1==.
   0022                     439 _MbAnsRd_PARM_2:
   0022                     440 	.ds 1
                    0023    441 LMbAnsRd$bytes$1$1==.
   0023                     442 _MbAnsRd_PARM_3:
   0023                     443 	.ds 1
                    0024    444 LMbAnsRd$vals$1$1==.
   0024                     445 _MbAnsRd_PARM_4:
   0024                     446 	.ds 3
                    0027    447 LMbAnsRd$bf$1$1==.
   0027                     448 _MbAnsRd_PARM_5:
   0027                     449 	.ds 3
                    002A    450 LMbAnsRd$n$1$1==.
   002A                     451 _MbAnsRd_n_1_1:
   002A                     452 	.ds 1
                    002B    453 LMbAnsErr$fce$1$1==.
   002B                     454 _MbAnsErr_PARM_2:
   002B                     455 	.ds 1
                    002C    456 LMbAnsErr$er$1$1==.
   002C                     457 _MbAnsErr_PARM_3:
   002C                     458 	.ds 1
                    002D    459 LMbAnsErr$bf$1$1==.
   002D                     460 _MbAnsErr_PARM_4:
   002D                     461 	.ds 3
                            462 ;--------------------------------------------------------
                            463 ; overlayable items in internal ram 
                            464 ;--------------------------------------------------------
                            465 	.area	OSEG    (OVR,DATA)
                            466 	.area	OSEG    (OVR,DATA)
                    0000    467 LWrWord$bf$1$1==.
   0000                     468 _WrWord_PARM_2::
   0000                     469 	.ds 3
                            470 	.area	OSEG    (OVR,DATA)
                            471 	.area	OSEG    (OVR,DATA)
                            472 	.area	OSEG    (OVR,DATA)
                            473 	.area	OSEG    (OVR,DATA)
                    0000    474 LMbLrc$len$1$1==.
   0000                     475 _MbLrc_PARM_2::
   0000                     476 	.ds 1
                            477 	.area	OSEG    (OVR,DATA)
                    0000    478 LMrtuCrc$len$1$1==.
   0000                     479 _MrtuCrc_PARM_2::
   0000                     480 	.ds 1
                            481 	.area	OSEG    (OVR,DATA)
                            482 	.area	OSEG    (OVR,DATA)
                    0000    483 LMrtuWrCrc$bf$1$1==.
   0000                     484 _MrtuWrCrc_PARM_2::
   0000                     485 	.ds 3
                            486 	.area	OSEG    (OVR,DATA)
                    0000    487 LMrtuAnsErr$fce$1$1==.
   0000                     488 _MrtuAnsErr_PARM_2::
   0000                     489 	.ds 1
                    0001    490 LMrtuAnsErr$err$1$1==.
   0001                     491 _MrtuAnsErr_PARM_3::
   0001                     492 	.ds 1
                    0002    493 LMrtuAnsErr$bf$1$1==.
   0002                     494 _MrtuAnsErr_PARM_4::
   0002                     495 	.ds 3
                            496 	.area	OSEG    (OVR,DATA)
                    0000    497 LMrtuAnsRd$fce$1$1==.
   0000                     498 _MrtuAnsRd_PARM_2::
   0000                     499 	.ds 1
                    0001    500 LMrtuAnsRd$bytes$1$1==.
   0001                     501 _MrtuAnsRd_PARM_3::
   0001                     502 	.ds 1
                    0002    503 LMrtuAnsRd$vals$1$1==.
   0002                     504 _MrtuAnsRd_PARM_4::
   0002                     505 	.ds 3
                    0005    506 LMrtuAnsRd$bf$1$1==.
   0005                     507 _MrtuAnsRd_PARM_5::
   0005                     508 	.ds 3
                    0008    509 LMrtuAnsRd$n$1$1==.
   0008                     510 _MrtuAnsRd_n_1_1::
   0008                     511 	.ds 1
                            512 	.area	OSEG    (OVR,DATA)
                    0000    513 LMrtuWrOne$fce$1$1==.
   0000                     514 _MrtuWrOne_PARM_2::
   0000                     515 	.ds 1
                    0001    516 LMrtuWrOne$reg$1$1==.
   0001                     517 _MrtuWrOne_PARM_3::
   0001                     518 	.ds 2
                    0003    519 LMrtuWrOne$val$1$1==.
   0003                     520 _MrtuWrOne_PARM_4::
   0003                     521 	.ds 2
                    0005    522 LMrtuWrOne$bf$1$1==.
   0005                     523 _MrtuWrOne_PARM_5::
   0005                     524 	.ds 3
                            525 	.area	OSEG    (OVR,DATA)
                    0000    526 LMrtuRd$fce$1$1==.
   0000                     527 _MrtuRd_PARM_2::
   0000                     528 	.ds 1
                    0001    529 LMrtuRd$reg$1$1==.
   0001                     530 _MrtuRd_PARM_3::
   0001                     531 	.ds 2
                    0003    532 LMrtuRd$nbr$1$1==.
   0003                     533 _MrtuRd_PARM_4::
   0003                     534 	.ds 2
                    0005    535 LMrtuRd$bf$1$1==.
   0005                     536 _MrtuRd_PARM_5::
   0005                     537 	.ds 3
                            538 	.area	OSEG    (OVR,DATA)
                    0000    539 LMrtuWr$fce$1$1==.
   0000                     540 _MrtuWr_PARM_2::
   0000                     541 	.ds 1
                    0001    542 LMrtuWr$reg$1$1==.
   0001                     543 _MrtuWr_PARM_3::
   0001                     544 	.ds 2
                    0003    545 LMrtuWr$nbr$1$1==.
   0003                     546 _MrtuWr_PARM_4::
   0003                     547 	.ds 2
                    0005    548 LMrtuWr$vals$1$1==.
   0005                     549 _MrtuWr_PARM_5::
   0005                     550 	.ds 3
                    0008    551 LMrtuWr$bf$1$1==.
   0008                     552 _MrtuWr_PARM_6::
   0008                     553 	.ds 3
                    000B    554 LMrtuWr$bytes$1$1==.
   000B                     555 _MrtuWr_bytes_1_1::
   000B                     556 	.ds 1
                            557 ;--------------------------------------------------------
                            558 ; indirectly addressable internal ram data
                            559 ;--------------------------------------------------------
                            560 	.area ISEG    (DATA)
                            561 ;--------------------------------------------------------
                            562 ; absolute internal ram data
                            563 ;--------------------------------------------------------
                            564 	.area IABS    (ABS,DATA)
                            565 	.area IABS    (ABS,DATA)
                            566 ;--------------------------------------------------------
                            567 ; bit data
                            568 ;--------------------------------------------------------
                            569 	.area BSEG    (BIT)
                            570 ;--------------------------------------------------------
                            571 ; paged external ram data
                            572 ;--------------------------------------------------------
                            573 	.area PSEG    (PAG,XDATA)
                            574 ;--------------------------------------------------------
                            575 ; external ram data
                            576 ;--------------------------------------------------------
                            577 	.area XSEG    (XDATA)
                            578 ;--------------------------------------------------------
                            579 ; absolute external ram data
                            580 ;--------------------------------------------------------
                            581 	.area XABS    (ABS,XDATA)
                            582 ;--------------------------------------------------------
                            583 ; external initialized ram data
                            584 ;--------------------------------------------------------
                            585 	.area XISEG   (XDATA)
                            586 	.area HOME    (CODE)
                            587 	.area GSINIT0 (CODE)
                            588 	.area GSINIT1 (CODE)
                            589 	.area GSINIT2 (CODE)
                            590 	.area GSINIT3 (CODE)
                            591 	.area GSINIT4 (CODE)
                            592 	.area GSINIT5 (CODE)
                            593 	.area GSINIT  (CODE)
                            594 	.area GSFINAL (CODE)
                            595 	.area CSEG    (CODE)
                            596 ;--------------------------------------------------------
                            597 ; global & static initialisations
                            598 ;--------------------------------------------------------
                            599 	.area HOME    (CODE)
                            600 	.area GSINIT  (CODE)
                            601 	.area GSFINAL (CODE)
                            602 	.area GSINIT  (CODE)
                            603 ;--------------------------------------------------------
                            604 ; Home
                            605 ;--------------------------------------------------------
                            606 	.area HOME    (CODE)
                            607 	.area HOME    (CODE)
                            608 ;--------------------------------------------------------
                            609 ; code
                            610 ;--------------------------------------------------------
                            611 	.area CSEG    (CODE)
                            612 ;------------------------------------------------------------
                            613 ;Allocation info for local variables in function 'RdWord'
                            614 ;------------------------------------------------------------
                            615 ;bf                        Allocated to registers r2 r3 r4 
                            616 ;------------------------------------------------------------
                    0000    617 	G$RdWord$0$0 ==.
                    0000    618 	C$modbus.c$7$0$0 ==.
                            619 ;	modbus.c:7: word RdWord(byte * bf)
                            620 ;	-----------------------------------------
                            621 ;	 function RdWord
                            622 ;	-----------------------------------------
   0000                     623 _RdWord:
                    0002    624 	ar2 = 0x02
                    0003    625 	ar3 = 0x03
                    0004    626 	ar4 = 0x04
                    0005    627 	ar5 = 0x05
                    0006    628 	ar6 = 0x06
                    0007    629 	ar7 = 0x07
                    0000    630 	ar0 = 0x00
                    0001    631 	ar1 = 0x01
                    0000    632 	C$modbus.c$9$1$1 ==.
                            633 ;	modbus.c:9: return ( *bf<<8 | *(bf+1));
   0000 AA 82               634 	mov	r2,dpl
   0002 AB 83               635 	mov	r3,dph
   0004 AC F0               636 	mov	r4,b
   0006 12s00r00            637 	lcall	__gptrget
   0009 FE                  638 	mov	r6,a
   000A 7D 00               639 	mov	r5,#0x00
   000C 0A                  640 	inc	r2
   000D BA 00 01            641 	cjne	r2,#0x00,00103$
   0010 0B                  642 	inc	r3
   0011                     643 00103$:
   0011 8A 82               644 	mov	dpl,r2
   0013 8B 83               645 	mov	dph,r3
   0015 8C F0               646 	mov	b,r4
   0017 12s00r00            647 	lcall	__gptrget
   001A 7B 00               648 	mov	r3,#0x00
   001C 4D                  649 	orl	a,r5
   001D F5 82               650 	mov	dpl,a
   001F EB                  651 	mov	a,r3
   0020 4E                  652 	orl	a,r6
   0021 F5 83               653 	mov	dph,a
                    0023    654 	C$modbus.c$10$1$1 ==.
                    0023    655 	XG$RdWord$0$0 ==.
   0023 22                  656 	ret
                            657 ;------------------------------------------------------------
                            658 ;Allocation info for local variables in function 'WrWord'
                            659 ;------------------------------------------------------------
                            660 ;bf                        Allocated with name '_WrWord_PARM_2'
                            661 ;val                       Allocated to registers r2 r3 
                            662 ;------------------------------------------------------------
                    0024    663 	G$WrWord$0$0 ==.
                    0024    664 	C$modbus.c$12$1$1 ==.
                            665 ;	modbus.c:12: byte WrWord(word val,byte *bf)
                            666 ;	-----------------------------------------
                            667 ;	 function WrWord
                            668 ;	-----------------------------------------
   0024                     669 _WrWord:
   0024 AA 82               670 	mov	r2,dpl
   0026 AB 83               671 	mov	r3,dph
                    0028    672 	C$modbus.c$14$1$1 ==.
                            673 ;	modbus.c:14: *bf++ = val>>8;
   0028 AC*00               674 	mov	r4,_WrWord_PARM_2
   002A AD*01               675 	mov	r5,(_WrWord_PARM_2 + 1)
   002C AE*02               676 	mov	r6,(_WrWord_PARM_2 + 2)
   002E 8B 07               677 	mov	ar7,r3
   0030 8C 82               678 	mov	dpl,r4
   0032 8D 83               679 	mov	dph,r5
   0034 8E F0               680 	mov	b,r6
   0036 EF                  681 	mov	a,r7
   0037 12s00r00            682 	lcall	__gptrput
   003A 74 01               683 	mov	a,#0x01
   003C 2C                  684 	add	a,r4
   003D F5*00               685 	mov	_WrWord_PARM_2,a
   003F E4                  686 	clr	a
   0040 3D                  687 	addc	a,r5
   0041 F5*01               688 	mov	(_WrWord_PARM_2 + 1),a
   0043 8E*02               689 	mov	(_WrWord_PARM_2 + 2),r6
                    0045    690 	C$modbus.c$15$1$1 ==.
                            691 ;	modbus.c:15: *bf   = val;
   0045 AC*00               692 	mov	r4,_WrWord_PARM_2
   0047 AD*01               693 	mov	r5,(_WrWord_PARM_2 + 1)
   0049 AE*02               694 	mov	r6,(_WrWord_PARM_2 + 2)
   004B 8C 82               695 	mov	dpl,r4
   004D 8D 83               696 	mov	dph,r5
   004F 8E F0               697 	mov	b,r6
   0051 EA                  698 	mov	a,r2
   0052 12s00r00            699 	lcall	__gptrput
                    0055    700 	C$modbus.c$16$1$1 ==.
                            701 ;	modbus.c:16: return 2;
   0055 75 82 02            702 	mov	dpl,#0x02
                    0058    703 	C$modbus.c$18$1$1 ==.
                    0058    704 	XG$WrWord$0$0 ==.
   0058 22                  705 	ret
                            706 ;------------------------------------------------------------
                            707 ;Allocation info for local variables in function 'AHex'
                            708 ;------------------------------------------------------------
                            709 ;c                         Allocated to registers r2 
                            710 ;------------------------------------------------------------
                    0059    711 	G$AHex$0$0 ==.
                    0059    712 	C$modbus.c$23$1$1 ==.
                            713 ;	modbus.c:23: byte AHex(byte c)
                            714 ;	-----------------------------------------
                            715 ;	 function AHex
                            716 ;	-----------------------------------------
   0059                     717 _AHex:
   0059 AA 82               718 	mov	r2,dpl
                    005B    719 	C$modbus.c$25$1$1 ==.
                            720 ;	modbus.c:25: if ((c>=(byte)'0') && (c<=(byte)'9')) return (byte)(c-'0');
   005B BA 30 00            721 	cjne	r2,#0x30,00113$
   005E                     722 00113$:
   005E 40 0D               723 	jc	00102$
   0060 74 39               724 	mov	a,#0x39
   0062 B5 02 00            725 	cjne	a,ar2,00115$
   0065                     726 00115$:
   0065 40 06               727 	jc	00102$
   0067 EA                  728 	mov	a,r2
   0068 24 D0               729 	add	a,#0xd0
   006A F5 82               730 	mov	dpl,a
   006C 22                  731 	ret
   006D                     732 00102$:
                    006D    733 	C$modbus.c$26$1$1 ==.
                            734 ;	modbus.c:26: if ((c>=(byte)'A') && (c<=(byte)'F')) return (byte)(c-'A'+10);
   006D BA 41 00            735 	cjne	r2,#0x41,00117$
   0070                     736 00117$:
   0070 40 0D               737 	jc	00105$
   0072 74 46               738 	mov	a,#0x46
   0074 B5 02 00            739 	cjne	a,ar2,00119$
   0077                     740 00119$:
   0077 40 06               741 	jc	00105$
   0079 74 C9               742 	mov	a,#0xC9
   007B 2A                  743 	add	a,r2
   007C F5 82               744 	mov	dpl,a
                    007E    745 	C$modbus.c$27$1$1 ==.
                            746 ;	modbus.c:27: return 0xFF;
                    007E    747 	C$modbus.c$28$1$1 ==.
                    007E    748 	XG$AHex$0$0 ==.
   007E 22                  749 	ret
   007F                     750 00105$:
   007F 75 82 FF            751 	mov	dpl,#0xFF
   0082 22                  752 	ret
                            753 ;------------------------------------------------------------
                            754 ;Allocation info for local variables in function 'HexAsc'
                            755 ;------------------------------------------------------------
                            756 ;b                         Allocated to registers r2 
                            757 ;------------------------------------------------------------
                    0083    758 	G$HexAsc$0$0 ==.
                    0083    759 	C$modbus.c$30$1$1 ==.
                            760 ;	modbus.c:30: byte HexAsc(byte b)
                            761 ;	-----------------------------------------
                            762 ;	 function HexAsc
                            763 ;	-----------------------------------------
   0083                     764 _HexAsc:
   0083 AA 82               765 	mov	r2,dpl
                    0085    766 	C$modbus.c$32$1$1 ==.
                            767 ;	modbus.c:32: if (b<10)  return (byte)(b+'0');
   0085 BA 0A 00            768 	cjne	r2,#0x0A,00106$
   0088                     769 00106$:
   0088 50 06               770 	jnc	00102$
   008A 74 30               771 	mov	a,#0x30
   008C 2A                  772 	add	a,r2
   008D F5 82               773 	mov	dpl,a
   008F 22                  774 	ret
   0090                     775 00102$:
                    0090    776 	C$modbus.c$33$1$1 ==.
                            777 ;	modbus.c:33: return (byte)(b-10+'A');
   0090 74 37               778 	mov	a,#0x37
   0092 2A                  779 	add	a,r2
   0093 F5 82               780 	mov	dpl,a
                    0095    781 	C$modbus.c$34$1$1 ==.
                    0095    782 	XG$HexAsc$0$0 ==.
   0095 22                  783 	ret
                            784 ;------------------------------------------------------------
                            785 ;Allocation info for local variables in function 'MbRdByte'
                            786 ;------------------------------------------------------------
                            787 ;bf                        Allocated to registers r2 r3 r4 
                            788 ;------------------------------------------------------------
                    0096    789 	G$MbRdByte$0$0 ==.
                    0096    790 	C$modbus.c$37$1$1 ==.
                            791 ;	modbus.c:37: byte MbRdByte(byte *bf)
                            792 ;	-----------------------------------------
                            793 ;	 function MbRdByte
                            794 ;	-----------------------------------------
   0096                     795 _MbRdByte:
                    0096    796 	C$modbus.c$39$1$1 ==.
                            797 ;	modbus.c:39: return ((AHex(*bf) << 4) | AHex(*(bf+1)));
   0096 AA 82               798 	mov	r2,dpl
   0098 AB 83               799 	mov	r3,dph
   009A AC F0               800 	mov	r4,b
   009C 12s00r00            801 	lcall	__gptrget
   009F F5 82               802 	mov	dpl,a
   00A1 C0 02               803 	push	ar2
   00A3 C0 03               804 	push	ar3
   00A5 C0 04               805 	push	ar4
   00A7 12s00r59            806 	lcall	_AHex
   00AA AD 82               807 	mov	r5,dpl
   00AC D0 04               808 	pop	ar4
   00AE D0 03               809 	pop	ar3
   00B0 D0 02               810 	pop	ar2
   00B2 ED                  811 	mov	a,r5
   00B3 C4                  812 	swap	a
   00B4 54 F0               813 	anl	a,#0xf0
   00B6 FD                  814 	mov	r5,a
   00B7 0A                  815 	inc	r2
   00B8 BA 00 01            816 	cjne	r2,#0x00,00103$
   00BB 0B                  817 	inc	r3
   00BC                     818 00103$:
   00BC 8A 82               819 	mov	dpl,r2
   00BE 8B 83               820 	mov	dph,r3
   00C0 8C F0               821 	mov	b,r4
   00C2 12s00r00            822 	lcall	__gptrget
   00C5 F5 82               823 	mov	dpl,a
   00C7 C0 05               824 	push	ar5
   00C9 12s00r59            825 	lcall	_AHex
   00CC AA 82               826 	mov	r2,dpl
   00CE D0 05               827 	pop	ar5
   00D0 EA                  828 	mov	a,r2
   00D1 4D                  829 	orl	a,r5
   00D2 F5 82               830 	mov	dpl,a
                    00D4    831 	C$modbus.c$40$1$1 ==.
                    00D4    832 	XG$MbRdByte$0$0 ==.
   00D4 22                  833 	ret
                            834 ;------------------------------------------------------------
                            835 ;Allocation info for local variables in function 'MbRdWord'
                            836 ;------------------------------------------------------------
                            837 ;bf                        Allocated to registers r2 r3 r4 
                            838 ;------------------------------------------------------------
                    00D5    839 	G$MbRdWord$0$0 ==.
                    00D5    840 	C$modbus.c$41$1$1 ==.
                            841 ;	modbus.c:41: word MbRdWord(byte *bf)
                            842 ;	-----------------------------------------
                            843 ;	 function MbRdWord
                            844 ;	-----------------------------------------
   00D5                     845 _MbRdWord:
                    00D5    846 	C$modbus.c$43$1$1 ==.
                            847 ;	modbus.c:43: return ((AHex(*bf) << 12) | (AHex(*(bf+1)) << 8) | (AHex(*(bf+2)) << 4) | AHex(*(bf+3)));
   00D5 AA 82               848 	mov	r2,dpl
   00D7 AB 83               849 	mov	r3,dph
   00D9 AC F0               850 	mov	r4,b
   00DB 12s00r00            851 	lcall	__gptrget
   00DE F5 82               852 	mov	dpl,a
   00E0 C0 02               853 	push	ar2
   00E2 C0 03               854 	push	ar3
   00E4 C0 04               855 	push	ar4
   00E6 12s00r59            856 	lcall	_AHex
   00E9 AD 82               857 	mov	r5,dpl
   00EB D0 04               858 	pop	ar4
   00ED D0 03               859 	pop	ar3
   00EF D0 02               860 	pop	ar2
   00F1 ED                  861 	mov	a,r5
   00F2 C4                  862 	swap	a
   00F3 54 F0               863 	anl	a,#0xf0
   00F5 FE                  864 	mov	r6,a
   00F6 7D 00               865 	mov	r5,#0x00
   00F8 74 01               866 	mov	a,#0x01
   00FA 2A                  867 	add	a,r2
   00FB FF                  868 	mov	r7,a
   00FC E4                  869 	clr	a
   00FD 3B                  870 	addc	a,r3
   00FE F8                  871 	mov	r0,a
   00FF 8C 01               872 	mov	ar1,r4
   0101 8F 82               873 	mov	dpl,r7
   0103 88 83               874 	mov	dph,r0
   0105 89 F0               875 	mov	b,r1
   0107 12s00r00            876 	lcall	__gptrget
   010A F5 82               877 	mov	dpl,a
   010C C0 02               878 	push	ar2
   010E C0 03               879 	push	ar3
   0110 C0 04               880 	push	ar4
   0112 C0 05               881 	push	ar5
   0114 C0 06               882 	push	ar6
   0116 12s00r59            883 	lcall	_AHex
   0119 AF 82               884 	mov	r7,dpl
   011B D0 06               885 	pop	ar6
   011D D0 05               886 	pop	ar5
   011F D0 04               887 	pop	ar4
   0121 D0 03               888 	pop	ar3
   0123 D0 02               889 	pop	ar2
   0125 8F 00               890 	mov	ar0,r7
   0127 E4                  891 	clr	a
   0128 42 05               892 	orl	ar5,a
   012A E8                  893 	mov	a,r0
   012B 42 06               894 	orl	ar6,a
   012D 74 02               895 	mov	a,#0x02
   012F 2A                  896 	add	a,r2
   0130 FF                  897 	mov	r7,a
   0131 E4                  898 	clr	a
   0132 3B                  899 	addc	a,r3
   0133 F8                  900 	mov	r0,a
   0134 8C 01               901 	mov	ar1,r4
   0136 8F 82               902 	mov	dpl,r7
   0138 88 83               903 	mov	dph,r0
   013A 89 F0               904 	mov	b,r1
   013C 12s00r00            905 	lcall	__gptrget
   013F F5 82               906 	mov	dpl,a
   0141 C0 02               907 	push	ar2
   0143 C0 03               908 	push	ar3
   0145 C0 04               909 	push	ar4
   0147 C0 05               910 	push	ar5
   0149 C0 06               911 	push	ar6
   014B 12s00r59            912 	lcall	_AHex
   014E AF 82               913 	mov	r7,dpl
   0150 D0 06               914 	pop	ar6
   0152 D0 05               915 	pop	ar5
   0154 D0 04               916 	pop	ar4
   0156 D0 03               917 	pop	ar3
   0158 D0 02               918 	pop	ar2
   015A E4                  919 	clr	a
   015B C4                  920 	swap	a
   015C 54 F0               921 	anl	a,#0xf0
   015E CF                  922 	xch	a,r7
   015F C4                  923 	swap	a
   0160 CF                  924 	xch	a,r7
   0161 6F                  925 	xrl	a,r7
   0162 CF                  926 	xch	a,r7
   0163 54 F0               927 	anl	a,#0xf0
   0165 CF                  928 	xch	a,r7
   0166 6F                  929 	xrl	a,r7
   0167 F8                  930 	mov	r0,a
   0168 EF                  931 	mov	a,r7
   0169 42 05               932 	orl	ar5,a
   016B E8                  933 	mov	a,r0
   016C 42 06               934 	orl	ar6,a
   016E 74 03               935 	mov	a,#0x03
   0170 2A                  936 	add	a,r2
   0171 FA                  937 	mov	r2,a
   0172 E4                  938 	clr	a
   0173 3B                  939 	addc	a,r3
   0174 FB                  940 	mov	r3,a
   0175 8A 82               941 	mov	dpl,r2
   0177 8B 83               942 	mov	dph,r3
   0179 8C F0               943 	mov	b,r4
   017B 12s00r00            944 	lcall	__gptrget
   017E F5 82               945 	mov	dpl,a
   0180 C0 05               946 	push	ar5
   0182 C0 06               947 	push	ar6
   0184 12s00r59            948 	lcall	_AHex
   0187 AA 82               949 	mov	r2,dpl
   0189 D0 06               950 	pop	ar6
   018B D0 05               951 	pop	ar5
   018D 7B 00               952 	mov	r3,#0x00
   018F EA                  953 	mov	a,r2
   0190 4D                  954 	orl	a,r5
   0191 F5 82               955 	mov	dpl,a
   0193 EB                  956 	mov	a,r3
   0194 4E                  957 	orl	a,r6
   0195 F5 83               958 	mov	dph,a
                    0197    959 	C$modbus.c$44$1$1 ==.
                    0197    960 	XG$MbRdWord$0$0 ==.
   0197 22                  961 	ret
                            962 ;------------------------------------------------------------
                            963 ;Allocation info for local variables in function 'MbWrByte'
                            964 ;------------------------------------------------------------
                            965 ;bf                        Allocated with name '_MbWrByte_PARM_2'
                            966 ;b                         Allocated to registers r2 
                            967 ;------------------------------------------------------------
                    0198    968 	G$MbWrByte$0$0 ==.
                    0198    969 	C$modbus.c$48$1$1 ==.
                            970 ;	modbus.c:48: byte MbWrByte(byte b,byte *bf)
                            971 ;	-----------------------------------------
                            972 ;	 function MbWrByte
                            973 ;	-----------------------------------------
   0198                     974 _MbWrByte:
   0198 AA 82               975 	mov	r2,dpl
                    019A    976 	C$modbus.c$50$1$1 ==.
                            977 ;	modbus.c:50: *bf++ = HexAsc(b >> 4);
   019A AB*00               978 	mov	r3,_MbWrByte_PARM_2
   019C AC*01               979 	mov	r4,(_MbWrByte_PARM_2 + 1)
   019E AD*02               980 	mov	r5,(_MbWrByte_PARM_2 + 2)
   01A0 EA                  981 	mov	a,r2
   01A1 C4                  982 	swap	a
   01A2 54 0F               983 	anl	a,#0x0f
   01A4 F5 82               984 	mov	dpl,a
   01A6 C0 02               985 	push	ar2
   01A8 C0 03               986 	push	ar3
   01AA C0 04               987 	push	ar4
   01AC C0 05               988 	push	ar5
   01AE 12s00r83            989 	lcall	_HexAsc
   01B1 AE 82               990 	mov	r6,dpl
   01B3 D0 05               991 	pop	ar5
   01B5 D0 04               992 	pop	ar4
   01B7 D0 03               993 	pop	ar3
   01B9 D0 02               994 	pop	ar2
   01BB 8B 82               995 	mov	dpl,r3
   01BD 8C 83               996 	mov	dph,r4
   01BF 8D F0               997 	mov	b,r5
   01C1 EE                  998 	mov	a,r6
   01C2 12s00r00            999 	lcall	__gptrput
   01C5 74 01              1000 	mov	a,#0x01
   01C7 2B                 1001 	add	a,r3
   01C8 F5*00              1002 	mov	_MbWrByte_PARM_2,a
   01CA E4                 1003 	clr	a
   01CB 3C                 1004 	addc	a,r4
   01CC F5*01              1005 	mov	(_MbWrByte_PARM_2 + 1),a
   01CE 8D*02              1006 	mov	(_MbWrByte_PARM_2 + 2),r5
                    01D0   1007 	C$modbus.c$51$1$1 ==.
                           1008 ;	modbus.c:51: *bf = HexAsc(b & 0xF);
   01D0 AB*00              1009 	mov	r3,_MbWrByte_PARM_2
   01D2 AC*01              1010 	mov	r4,(_MbWrByte_PARM_2 + 1)
   01D4 AD*02              1011 	mov	r5,(_MbWrByte_PARM_2 + 2)
   01D6 74 0F              1012 	mov	a,#0x0F
   01D8 5A                 1013 	anl	a,r2
   01D9 F5 82              1014 	mov	dpl,a
   01DB C0 03              1015 	push	ar3
   01DD C0 04              1016 	push	ar4
   01DF C0 05              1017 	push	ar5
   01E1 12s00r83           1018 	lcall	_HexAsc
   01E4 AA 82              1019 	mov	r2,dpl
   01E6 D0 05              1020 	pop	ar5
   01E8 D0 04              1021 	pop	ar4
   01EA D0 03              1022 	pop	ar3
   01EC 8B 82              1023 	mov	dpl,r3
   01EE 8C 83              1024 	mov	dph,r4
   01F0 8D F0              1025 	mov	b,r5
   01F2 EA                 1026 	mov	a,r2
   01F3 12s00r00           1027 	lcall	__gptrput
                    01F6   1028 	C$modbus.c$52$1$1 ==.
                           1029 ;	modbus.c:52: return 2;
   01F6 75 82 02           1030 	mov	dpl,#0x02
                    01F9   1031 	C$modbus.c$53$1$1 ==.
                    01F9   1032 	XG$MbWrByte$0$0 ==.
   01F9 22                 1033 	ret
                           1034 ;------------------------------------------------------------
                           1035 ;Allocation info for local variables in function 'MbWrWord'
                           1036 ;------------------------------------------------------------
                           1037 ;bf                        Allocated with name '_MbWrWord_PARM_2'
                           1038 ;w                         Allocated to registers r2 r3 
                           1039 ;------------------------------------------------------------
                    01FA   1040 	G$MbWrWord$0$0 ==.
                    01FA   1041 	C$modbus.c$56$1$1 ==.
                           1042 ;	modbus.c:56: byte MbWrWord(word w,byte *bf)
                           1043 ;	-----------------------------------------
                           1044 ;	 function MbWrWord
                           1045 ;	-----------------------------------------
   01FA                    1046 _MbWrWord:
   01FA AA 82              1047 	mov	r2,dpl
   01FC AB 83              1048 	mov	r3,dph
                    01FE   1049 	C$modbus.c$58$1$1 ==.
                           1050 ;	modbus.c:58: *bf++ = HexAsc(w >> 12);
   01FE AC*03              1051 	mov	r4,_MbWrWord_PARM_2
   0200 AD*04              1052 	mov	r5,(_MbWrWord_PARM_2 + 1)
   0202 AE*05              1053 	mov	r6,(_MbWrWord_PARM_2 + 2)
   0204 EB                 1054 	mov	a,r3
   0205 C4                 1055 	swap	a
   0206 54 0F              1056 	anl	a,#0x0f
   0208 F5 82              1057 	mov	dpl,a
   020A C0 02              1058 	push	ar2
   020C C0 03              1059 	push	ar3
   020E C0 04              1060 	push	ar4
   0210 C0 05              1061 	push	ar5
   0212 C0 06              1062 	push	ar6
   0214 12s00r83           1063 	lcall	_HexAsc
   0217 AF 82              1064 	mov	r7,dpl
   0219 D0 06              1065 	pop	ar6
   021B D0 05              1066 	pop	ar5
   021D D0 04              1067 	pop	ar4
   021F D0 03              1068 	pop	ar3
   0221 8C 82              1069 	mov	dpl,r4
   0223 8D 83              1070 	mov	dph,r5
   0225 8E F0              1071 	mov	b,r6
   0227 EF                 1072 	mov	a,r7
   0228 12s00r00           1073 	lcall	__gptrput
   022B 74 01              1074 	mov	a,#0x01
   022D 2C                 1075 	add	a,r4
   022E F5*03              1076 	mov	_MbWrWord_PARM_2,a
   0230 E4                 1077 	clr	a
   0231 3D                 1078 	addc	a,r5
   0232 F5*04              1079 	mov	(_MbWrWord_PARM_2 + 1),a
   0234 8E*05              1080 	mov	(_MbWrWord_PARM_2 + 2),r6
                    0236   1081 	C$modbus.c$59$1$1 ==.
                           1082 ;	modbus.c:59: *bf++ = HexAsc((w >> 8) & 0xF);
   0236 AC*03              1083 	mov	r4,_MbWrWord_PARM_2
   0238 AD*04              1084 	mov	r5,(_MbWrWord_PARM_2 + 1)
   023A AE*05              1085 	mov	r6,(_MbWrWord_PARM_2 + 2)
   023C 8B 07              1086 	mov	ar7,r3
   023E 74 0F              1087 	mov	a,#0x0F
   0240 5F                 1088 	anl	a,r7
   0241 F5 82              1089 	mov	dpl,a
   0243 C0 03              1090 	push	ar3
   0245 C0 04              1091 	push	ar4
   0247 C0 05              1092 	push	ar5
   0249 C0 06              1093 	push	ar6
   024B 12s00r83           1094 	lcall	_HexAsc
   024E AF 82              1095 	mov	r7,dpl
   0250 D0 06              1096 	pop	ar6
   0252 D0 05              1097 	pop	ar5
   0254 D0 04              1098 	pop	ar4
   0256 D0 03              1099 	pop	ar3
   0258 D0 02              1100 	pop	ar2
   025A 8C 82              1101 	mov	dpl,r4
   025C 8D 83              1102 	mov	dph,r5
   025E 8E F0              1103 	mov	b,r6
   0260 EF                 1104 	mov	a,r7
   0261 12s00r00           1105 	lcall	__gptrput
   0264 74 01              1106 	mov	a,#0x01
   0266 2C                 1107 	add	a,r4
   0267 F5*03              1108 	mov	_MbWrWord_PARM_2,a
   0269 E4                 1109 	clr	a
   026A 3D                 1110 	addc	a,r5
   026B F5*04              1111 	mov	(_MbWrWord_PARM_2 + 1),a
   026D 8E*05              1112 	mov	(_MbWrWord_PARM_2 + 2),r6
                    026F   1113 	C$modbus.c$60$1$1 ==.
                           1114 ;	modbus.c:60: *bf++ = HexAsc((w >> 4) & 0xF);
   026F AC*03              1115 	mov	r4,_MbWrWord_PARM_2
   0271 AD*04              1116 	mov	r5,(_MbWrWord_PARM_2 + 1)
   0273 AE*05              1117 	mov	r6,(_MbWrWord_PARM_2 + 2)
   0275 8A 07              1118 	mov	ar7,r2
   0277 EB                 1119 	mov	a,r3
   0278 C4                 1120 	swap	a
   0279 CF                 1121 	xch	a,r7
   027A C4                 1122 	swap	a
   027B 54 0F              1123 	anl	a,#0x0f
   027D 6F                 1124 	xrl	a,r7
   027E CF                 1125 	xch	a,r7
   027F 54 0F              1126 	anl	a,#0x0f
   0281 CF                 1127 	xch	a,r7
   0282 6F                 1128 	xrl	a,r7
   0283 CF                 1129 	xch	a,r7
   0284 53 07 0F           1130 	anl	ar7,#0x0F
   0287 8F 82              1131 	mov	dpl,r7
   0289 C0 02              1132 	push	ar2
   028B C0 03              1133 	push	ar3
   028D C0 04              1134 	push	ar4
   028F C0 05              1135 	push	ar5
   0291 C0 06              1136 	push	ar6
   0293 12s00r83           1137 	lcall	_HexAsc
   0296 AF 82              1138 	mov	r7,dpl
   0298 D0 06              1139 	pop	ar6
   029A D0 05              1140 	pop	ar5
   029C D0 04              1141 	pop	ar4
   029E D0 03              1142 	pop	ar3
   02A0 D0 02              1143 	pop	ar2
   02A2 8C 82              1144 	mov	dpl,r4
   02A4 8D 83              1145 	mov	dph,r5
   02A6 8E F0              1146 	mov	b,r6
   02A8 EF                 1147 	mov	a,r7
   02A9 12s00r00           1148 	lcall	__gptrput
   02AC 74 01              1149 	mov	a,#0x01
   02AE 2C                 1150 	add	a,r4
   02AF F5*03              1151 	mov	_MbWrWord_PARM_2,a
   02B1 E4                 1152 	clr	a
   02B2 3D                 1153 	addc	a,r5
   02B3 F5*04              1154 	mov	(_MbWrWord_PARM_2 + 1),a
   02B5 8E*05              1155 	mov	(_MbWrWord_PARM_2 + 2),r6
                    02B7   1156 	C$modbus.c$61$1$1 ==.
                           1157 ;	modbus.c:61: *bf = HexAsc(w & 0xF);
   02B7 AC*03              1158 	mov	r4,_MbWrWord_PARM_2
   02B9 AD*04              1159 	mov	r5,(_MbWrWord_PARM_2 + 1)
   02BB AE*05              1160 	mov	r6,(_MbWrWord_PARM_2 + 2)
   02BD 53 02 0F           1161 	anl	ar2,#0x0F
   02C0 8A 82              1162 	mov	dpl,r2
   02C2 C0 04              1163 	push	ar4
   02C4 C0 05              1164 	push	ar5
   02C6 C0 06              1165 	push	ar6
   02C8 12s00r83           1166 	lcall	_HexAsc
   02CB AA 82              1167 	mov	r2,dpl
   02CD D0 06              1168 	pop	ar6
   02CF D0 05              1169 	pop	ar5
   02D1 D0 04              1170 	pop	ar4
   02D3 8C 82              1171 	mov	dpl,r4
   02D5 8D 83              1172 	mov	dph,r5
   02D7 8E F0              1173 	mov	b,r6
   02D9 EA                 1174 	mov	a,r2
   02DA 12s00r00           1175 	lcall	__gptrput
                    02DD   1176 	C$modbus.c$62$1$1 ==.
                           1177 ;	modbus.c:62: return 4;
   02DD 75 82 04           1178 	mov	dpl,#0x04
                    02E0   1179 	C$modbus.c$63$1$1 ==.
                    02E0   1180 	XG$MbWrWord$0$0 ==.
   02E0 22                 1181 	ret
                           1182 ;------------------------------------------------------------
                           1183 ;Allocation info for local variables in function 'MbWrEoT'
                           1184 ;------------------------------------------------------------
                           1185 ;bf                        Allocated to registers r2 r3 r4 
                           1186 ;------------------------------------------------------------
                    02E1   1187 	G$MbWrEoT$0$0 ==.
                    02E1   1188 	C$modbus.c$65$1$1 ==.
                           1189 ;	modbus.c:65: byte MbWrEoT(byte *bf)
                           1190 ;	-----------------------------------------
                           1191 ;	 function MbWrEoT
                           1192 ;	-----------------------------------------
   02E1                    1193 _MbWrEoT:
                    02E1   1194 	C$modbus.c$67$1$1 ==.
                           1195 ;	modbus.c:67: *bf++='\r';
   02E1 AC F0              1196 	mov	r4,b
   02E3 74 0D              1197 	mov	a,#0x0D
   02E5 12s00r00           1198 	lcall	__gptrput
   02E8 A3                 1199 	inc	dptr
                    02E9   1200 	C$modbus.c$68$1$1 ==.
                           1201 ;	modbus.c:68: *bf='\n';
   02E9 8C F0              1202 	mov	b,r4
   02EB 74 0A              1203 	mov	a,#0x0A
   02ED 12s00r00           1204 	lcall	__gptrput
                    02F0   1205 	C$modbus.c$69$1$1 ==.
                           1206 ;	modbus.c:69: return 2;
   02F0 75 82 02           1207 	mov	dpl,#0x02
                    02F3   1208 	C$modbus.c$70$1$1 ==.
                    02F3   1209 	XG$MbWrEoT$0$0 ==.
   02F3 22                 1210 	ret
                           1211 ;------------------------------------------------------------
                           1212 ;Allocation info for local variables in function 'MbLrc'
                           1213 ;------------------------------------------------------------
                           1214 ;len                       Allocated with name '_MbLrc_PARM_2'
                           1215 ;bf                        Allocated to registers r2 r3 r4 
                           1216 ;lrc                       Allocated to registers r5 
                           1217 ;------------------------------------------------------------
                    02F4   1218 	G$MbLrc$0$0 ==.
                    02F4   1219 	C$modbus.c$72$1$1 ==.
                           1220 ;	modbus.c:72: byte MbLrc(byte *bf,byte len)
                           1221 ;	-----------------------------------------
                           1222 ;	 function MbLrc
                           1223 ;	-----------------------------------------
   02F4                    1224 _MbLrc:
   02F4 AA 82              1225 	mov	r2,dpl
   02F6 AB 83              1226 	mov	r3,dph
   02F8 AC F0              1227 	mov	r4,b
                    02FA   1228 	C$modbus.c$74$1$1 ==.
                           1229 ;	modbus.c:74: byte lrc=0;
   02FA 7D 00              1230 	mov	r5,#0x00
                    02FC   1231 	C$modbus.c$76$1$1 ==.
                           1232 ;	modbus.c:76: while(len--) lrc+=*bf++;
   02FC AE*00              1233 	mov	r6,_MbLrc_PARM_2
   02FE                    1234 00101$:
   02FE 8E 07              1235 	mov	ar7,r6
   0300 1E                 1236 	dec	r6
   0301 EF                 1237 	mov	a,r7
   0302 60 14              1238 	jz	00103$
   0304 8A 82              1239 	mov	dpl,r2
   0306 8B 83              1240 	mov	dph,r3
   0308 8C F0              1241 	mov	b,r4
   030A 12s00r00           1242 	lcall	__gptrget
   030D FF                 1243 	mov	r7,a
   030E A3                 1244 	inc	dptr
   030F AA 82              1245 	mov	r2,dpl
   0311 AB 83              1246 	mov	r3,dph
   0313 EF                 1247 	mov	a,r7
   0314 2D                 1248 	add	a,r5
   0315 FD                 1249 	mov	r5,a
   0316 80 E6              1250 	sjmp	00101$
   0318                    1251 00103$:
                    0318   1252 	C$modbus.c$77$1$1 ==.
                           1253 ;	modbus.c:77: return -lrc;
   0318 C3                 1254 	clr	c
   0319 E4                 1255 	clr	a
   031A 9D                 1256 	subb	a,r5
   031B F5 82              1257 	mov	dpl,a
                    031D   1258 	C$modbus.c$78$1$1 ==.
                    031D   1259 	XG$MbLrc$0$0 ==.
   031D 22                 1260 	ret
                           1261 ;------------------------------------------------------------
                           1262 ;Allocation info for local variables in function 'MbRd'
                           1263 ;------------------------------------------------------------
                           1264 ;fce                       Allocated with name '_MbRd_PARM_2'
                           1265 ;reg                       Allocated with name '_MbRd_PARM_3'
                           1266 ;nbr                       Allocated with name '_MbRd_PARM_4'
                           1267 ;bf                        Allocated with name '_MbRd_PARM_5'
                           1268 ;adr                       Allocated to registers r2 
                           1269 ;n                         Allocated to registers r2 
                           1270 ;------------------------------------------------------------
                    031E   1271 	G$MbRd$0$0 ==.
                    031E   1272 	C$modbus.c$81$1$1 ==.
                           1273 ;	modbus.c:81: byte MbRd(byte adr,byte fce,word reg,word nbr,byte *bf)
                           1274 ;	-----------------------------------------
                           1275 ;	 function MbRd
                           1276 ;	-----------------------------------------
   031E                    1277 _MbRd:
   031E AA 82              1278 	mov	r2,dpl
                    0320   1279 	C$modbus.c$85$1$1 ==.
                           1280 ;	modbus.c:85: *bf = ':';
   0320 AB*0B              1281 	mov	r3,_MbRd_PARM_5
   0322 AC*0C              1282 	mov	r4,(_MbRd_PARM_5 + 1)
   0324 AD*0D              1283 	mov	r5,(_MbRd_PARM_5 + 2)
   0326 8B 82              1284 	mov	dpl,r3
   0328 8C 83              1285 	mov	dph,r4
   032A 8D F0              1286 	mov	b,r5
   032C 74 3A              1287 	mov	a,#0x3A
   032E 12s00r00           1288 	lcall	__gptrput
                    0331   1289 	C$modbus.c$86$1$1 ==.
                           1290 ;	modbus.c:86: n += MbWrByte(adr,bf+n);
   0331 74 01              1291 	mov	a,#0x01
   0333 2B                 1292 	add	a,r3
   0334 F5*00              1293 	mov	_MbWrByte_PARM_2,a
   0336 E4                 1294 	clr	a
   0337 3C                 1295 	addc	a,r4
   0338 F5*01              1296 	mov	(_MbWrByte_PARM_2 + 1),a
   033A 8D*02              1297 	mov	(_MbWrByte_PARM_2 + 2),r5
   033C 8A 82              1298 	mov	dpl,r2
   033E C0 03              1299 	push	ar3
   0340 C0 04              1300 	push	ar4
   0342 C0 05              1301 	push	ar5
   0344 12s01r98           1302 	lcall	_MbWrByte
   0347 AA 82              1303 	mov	r2,dpl
   0349 D0 05              1304 	pop	ar5
   034B D0 04              1305 	pop	ar4
   034D D0 03              1306 	pop	ar3
   034F 0A                 1307 	inc	r2
                    0350   1308 	C$modbus.c$87$1$1 ==.
                           1309 ;	modbus.c:87: n += MbWrByte(fce,bf+n);
   0350 EA                 1310 	mov	a,r2
   0351 2B                 1311 	add	a,r3
   0352 F5*00              1312 	mov	_MbWrByte_PARM_2,a
   0354 E4                 1313 	clr	a
   0355 3C                 1314 	addc	a,r4
   0356 F5*01              1315 	mov	(_MbWrByte_PARM_2 + 1),a
   0358 8D*02              1316 	mov	(_MbWrByte_PARM_2 + 2),r5
   035A 85*06 82           1317 	mov	dpl,_MbRd_PARM_2
   035D C0 02              1318 	push	ar2
   035F C0 03              1319 	push	ar3
   0361 C0 04              1320 	push	ar4
   0363 C0 05              1321 	push	ar5
   0365 12s01r98           1322 	lcall	_MbWrByte
   0368 AE 82              1323 	mov	r6,dpl
   036A D0 05              1324 	pop	ar5
   036C D0 04              1325 	pop	ar4
   036E D0 03              1326 	pop	ar3
   0370 D0 02              1327 	pop	ar2
   0372 EE                 1328 	mov	a,r6
   0373 2A                 1329 	add	a,r2
                    0374   1330 	C$modbus.c$88$1$1 ==.
                           1331 ;	modbus.c:88: n += MbWrWord(reg,bf+n);
   0374 FA                 1332 	mov	r2,a
   0375 2B                 1333 	add	a,r3
   0376 F5*03              1334 	mov	_MbWrWord_PARM_2,a
   0378 E4                 1335 	clr	a
   0379 3C                 1336 	addc	a,r4
   037A F5*04              1337 	mov	(_MbWrWord_PARM_2 + 1),a
   037C 8D*05              1338 	mov	(_MbWrWord_PARM_2 + 2),r5
   037E 85*07 82           1339 	mov	dpl,_MbRd_PARM_3
   0381 85*08 83           1340 	mov	dph,(_MbRd_PARM_3 + 1)
   0384 C0 02              1341 	push	ar2
   0386 C0 03              1342 	push	ar3
   0388 C0 04              1343 	push	ar4
   038A C0 05              1344 	push	ar5
   038C 12s01rFA           1345 	lcall	_MbWrWord
   038F AE 82              1346 	mov	r6,dpl
   0391 D0 05              1347 	pop	ar5
   0393 D0 04              1348 	pop	ar4
   0395 D0 03              1349 	pop	ar3
   0397 D0 02              1350 	pop	ar2
   0399 EE                 1351 	mov	a,r6
   039A 2A                 1352 	add	a,r2
                    039B   1353 	C$modbus.c$89$1$1 ==.
                           1354 ;	modbus.c:89: n += MbWrWord(nbr,bf+n);
   039B FA                 1355 	mov	r2,a
   039C 2B                 1356 	add	a,r3
   039D F5*03              1357 	mov	_MbWrWord_PARM_2,a
   039F E4                 1358 	clr	a
   03A0 3C                 1359 	addc	a,r4
   03A1 F5*04              1360 	mov	(_MbWrWord_PARM_2 + 1),a
   03A3 8D*05              1361 	mov	(_MbWrWord_PARM_2 + 2),r5
   03A5 85*09 82           1362 	mov	dpl,_MbRd_PARM_4
   03A8 85*0A 83           1363 	mov	dph,(_MbRd_PARM_4 + 1)
   03AB C0 02              1364 	push	ar2
   03AD 12s01rFA           1365 	lcall	_MbWrWord
   03B0 AB 82              1366 	mov	r3,dpl
   03B2 D0 02              1367 	pop	ar2
   03B4 EB                 1368 	mov	a,r3
   03B5 2A                 1369 	add	a,r2
                    03B6   1370 	C$modbus.c$90$1$1 ==.
                           1371 ;	modbus.c:90: return n;
                    03B6   1372 	C$modbus.c$91$1$1 ==.
                    03B6   1373 	XG$MbRd$0$0 ==.
   03B6 F5 82              1374 	mov	dpl,a
   03B8 22                 1375 	ret
                           1376 ;------------------------------------------------------------
                           1377 ;Allocation info for local variables in function 'MbWrOne'
                           1378 ;------------------------------------------------------------
                           1379 ;fce                       Allocated with name '_MbWrOne_PARM_2'
                           1380 ;reg                       Allocated with name '_MbWrOne_PARM_3'
                           1381 ;val                       Allocated with name '_MbWrOne_PARM_4'
                           1382 ;bf                        Allocated with name '_MbWrOne_PARM_5'
                           1383 ;adr                       Allocated to registers r2 
                           1384 ;n                         Allocated to registers r2 
                           1385 ;------------------------------------------------------------
                    03B9   1386 	G$MbWrOne$0$0 ==.
                    03B9   1387 	C$modbus.c$93$1$1 ==.
                           1388 ;	modbus.c:93: byte MbWrOne(byte adr,byte fce,word reg,word val,byte *bf)
                           1389 ;	-----------------------------------------
                           1390 ;	 function MbWrOne
                           1391 ;	-----------------------------------------
   03B9                    1392 _MbWrOne:
   03B9 AA 82              1393 	mov	r2,dpl
                    03BB   1394 	C$modbus.c$97$1$1 ==.
                           1395 ;	modbus.c:97: *bf = ':';
   03BB AB*13              1396 	mov	r3,_MbWrOne_PARM_5
   03BD AC*14              1397 	mov	r4,(_MbWrOne_PARM_5 + 1)
   03BF AD*15              1398 	mov	r5,(_MbWrOne_PARM_5 + 2)
   03C1 8B 82              1399 	mov	dpl,r3
   03C3 8C 83              1400 	mov	dph,r4
   03C5 8D F0              1401 	mov	b,r5
   03C7 74 3A              1402 	mov	a,#0x3A
   03C9 12s00r00           1403 	lcall	__gptrput
                    03CC   1404 	C$modbus.c$98$1$1 ==.
                           1405 ;	modbus.c:98: n += MbWrByte(adr,bf+n);
   03CC 74 01              1406 	mov	a,#0x01
   03CE 2B                 1407 	add	a,r3
   03CF F5*00              1408 	mov	_MbWrByte_PARM_2,a
   03D1 E4                 1409 	clr	a
   03D2 3C                 1410 	addc	a,r4
   03D3 F5*01              1411 	mov	(_MbWrByte_PARM_2 + 1),a
   03D5 8D*02              1412 	mov	(_MbWrByte_PARM_2 + 2),r5
   03D7 8A 82              1413 	mov	dpl,r2
   03D9 C0 03              1414 	push	ar3
   03DB C0 04              1415 	push	ar4
   03DD C0 05              1416 	push	ar5
   03DF 12s01r98           1417 	lcall	_MbWrByte
   03E2 AA 82              1418 	mov	r2,dpl
   03E4 D0 05              1419 	pop	ar5
   03E6 D0 04              1420 	pop	ar4
   03E8 D0 03              1421 	pop	ar3
   03EA 0A                 1422 	inc	r2
                    03EB   1423 	C$modbus.c$99$1$1 ==.
                           1424 ;	modbus.c:99: n += MbWrByte(fce,bf+n);
   03EB EA                 1425 	mov	a,r2
   03EC 2B                 1426 	add	a,r3
   03ED F5*00              1427 	mov	_MbWrByte_PARM_2,a
   03EF E4                 1428 	clr	a
   03F0 3C                 1429 	addc	a,r4
   03F1 F5*01              1430 	mov	(_MbWrByte_PARM_2 + 1),a
   03F3 8D*02              1431 	mov	(_MbWrByte_PARM_2 + 2),r5
   03F5 85*0E 82           1432 	mov	dpl,_MbWrOne_PARM_2
   03F8 C0 02              1433 	push	ar2
   03FA C0 03              1434 	push	ar3
   03FC C0 04              1435 	push	ar4
   03FE C0 05              1436 	push	ar5
   0400 12s01r98           1437 	lcall	_MbWrByte
   0403 AE 82              1438 	mov	r6,dpl
   0405 D0 05              1439 	pop	ar5
   0407 D0 04              1440 	pop	ar4
   0409 D0 03              1441 	pop	ar3
   040B D0 02              1442 	pop	ar2
   040D EE                 1443 	mov	a,r6
   040E 2A                 1444 	add	a,r2
                    040F   1445 	C$modbus.c$100$1$1 ==.
                           1446 ;	modbus.c:100: n += MbWrWord(reg,bf+n);
   040F FA                 1447 	mov	r2,a
   0410 2B                 1448 	add	a,r3
   0411 F5*03              1449 	mov	_MbWrWord_PARM_2,a
   0413 E4                 1450 	clr	a
   0414 3C                 1451 	addc	a,r4
   0415 F5*04              1452 	mov	(_MbWrWord_PARM_2 + 1),a
   0417 8D*05              1453 	mov	(_MbWrWord_PARM_2 + 2),r5
   0419 85*0F 82           1454 	mov	dpl,_MbWrOne_PARM_3
   041C 85*10 83           1455 	mov	dph,(_MbWrOne_PARM_3 + 1)
   041F C0 02              1456 	push	ar2
   0421 C0 03              1457 	push	ar3
   0423 C0 04              1458 	push	ar4
   0425 C0 05              1459 	push	ar5
   0427 12s01rFA           1460 	lcall	_MbWrWord
   042A AE 82              1461 	mov	r6,dpl
   042C D0 05              1462 	pop	ar5
   042E D0 04              1463 	pop	ar4
   0430 D0 03              1464 	pop	ar3
   0432 D0 02              1465 	pop	ar2
   0434 EE                 1466 	mov	a,r6
   0435 2A                 1467 	add	a,r2
                    0436   1468 	C$modbus.c$101$1$1 ==.
                           1469 ;	modbus.c:101: n += MbWrWord(val,bf+n);
   0436 FA                 1470 	mov	r2,a
   0437 2B                 1471 	add	a,r3
   0438 F5*03              1472 	mov	_MbWrWord_PARM_2,a
   043A E4                 1473 	clr	a
   043B 3C                 1474 	addc	a,r4
   043C F5*04              1475 	mov	(_MbWrWord_PARM_2 + 1),a
   043E 8D*05              1476 	mov	(_MbWrWord_PARM_2 + 2),r5
   0440 85*11 82           1477 	mov	dpl,_MbWrOne_PARM_4
   0443 85*12 83           1478 	mov	dph,(_MbWrOne_PARM_4 + 1)
   0446 C0 02              1479 	push	ar2
   0448 12s01rFA           1480 	lcall	_MbWrWord
   044B AB 82              1481 	mov	r3,dpl
   044D D0 02              1482 	pop	ar2
   044F EB                 1483 	mov	a,r3
   0450 2A                 1484 	add	a,r2
                    0451   1485 	C$modbus.c$102$1$1 ==.
                           1486 ;	modbus.c:102: return n;
                    0451   1487 	C$modbus.c$103$1$1 ==.
                    0451   1488 	XG$MbWrOne$0$0 ==.
   0451 F5 82              1489 	mov	dpl,a
   0453 22                 1490 	ret
                           1491 ;------------------------------------------------------------
                           1492 ;Allocation info for local variables in function 'MbWr'
                           1493 ;------------------------------------------------------------
                           1494 ;fce                       Allocated with name '_MbWr_PARM_2'
                           1495 ;reg                       Allocated with name '_MbWr_PARM_3'
                           1496 ;nbr                       Allocated with name '_MbWr_PARM_4'
                           1497 ;vals                      Allocated with name '_MbWr_PARM_5'
                           1498 ;bf                        Allocated with name '_MbWr_PARM_6'
                           1499 ;adr                       Allocated to registers r2 
                           1500 ;n                         Allocated with name '_MbWr_n_1_1'
                           1501 ;bytes                     Allocated to registers r6 
                           1502 ;------------------------------------------------------------
                    0454   1503 	G$MbWr$0$0 ==.
                    0454   1504 	C$modbus.c$106$1$1 ==.
                           1505 ;	modbus.c:106: byte MbWr(byte adr,byte fce,word reg,word nbr,byte *vals,byte *bf)
                           1506 ;	-----------------------------------------
                           1507 ;	 function MbWr
                           1508 ;	-----------------------------------------
   0454                    1509 _MbWr:
   0454 AA 82              1510 	mov	r2,dpl
                    0456   1511 	C$modbus.c$109$1$1 ==.
                           1512 ;	modbus.c:109: *bf = ':';
   0456 AB*1E              1513 	mov	r3,_MbWr_PARM_6
   0458 AC*1F              1514 	mov	r4,(_MbWr_PARM_6 + 1)
   045A AD*20              1515 	mov	r5,(_MbWr_PARM_6 + 2)
   045C 8B 82              1516 	mov	dpl,r3
   045E 8C 83              1517 	mov	dph,r4
   0460 8D F0              1518 	mov	b,r5
   0462 74 3A              1519 	mov	a,#0x3A
   0464 12s00r00           1520 	lcall	__gptrput
                    0467   1521 	C$modbus.c$110$1$1 ==.
                           1522 ;	modbus.c:110: n += MbWrByte(adr,bf+n);
   0467 74 01              1523 	mov	a,#0x01
   0469 2B                 1524 	add	a,r3
   046A F5*00              1525 	mov	_MbWrByte_PARM_2,a
   046C E4                 1526 	clr	a
   046D 3C                 1527 	addc	a,r4
   046E F5*01              1528 	mov	(_MbWrByte_PARM_2 + 1),a
   0470 8D*02              1529 	mov	(_MbWrByte_PARM_2 + 2),r5
   0472 8A 82              1530 	mov	dpl,r2
   0474 C0 03              1531 	push	ar3
   0476 C0 04              1532 	push	ar4
   0478 C0 05              1533 	push	ar5
   047A 12s01r98           1534 	lcall	_MbWrByte
   047D AA 82              1535 	mov	r2,dpl
   047F D0 05              1536 	pop	ar5
   0481 D0 04              1537 	pop	ar4
   0483 D0 03              1538 	pop	ar3
   0485 EA                 1539 	mov	a,r2
   0486 04                 1540 	inc	a
                    0487   1541 	C$modbus.c$111$1$1 ==.
                           1542 ;	modbus.c:111: n += MbWrByte(fce,bf+n);
   0487 F5*21              1543 	mov	_MbWr_n_1_1,a
   0489 2B                 1544 	add	a,r3
   048A F5*00              1545 	mov	_MbWrByte_PARM_2,a
   048C E4                 1546 	clr	a
   048D 3C                 1547 	addc	a,r4
   048E F5*01              1548 	mov	(_MbWrByte_PARM_2 + 1),a
   0490 8D*02              1549 	mov	(_MbWrByte_PARM_2 + 2),r5
   0492 85*16 82           1550 	mov	dpl,_MbWr_PARM_2
   0495 C0 03              1551 	push	ar3
   0497 C0 04              1552 	push	ar4
   0499 C0 05              1553 	push	ar5
   049B 12s01r98           1554 	lcall	_MbWrByte
   049E AE 82              1555 	mov	r6,dpl
   04A0 D0 05              1556 	pop	ar5
   04A2 D0 04              1557 	pop	ar4
   04A4 D0 03              1558 	pop	ar3
   04A6 EE                 1559 	mov	a,r6
   04A7 25*21              1560 	add	a,_MbWr_n_1_1
                    04A9   1561 	C$modbus.c$112$1$1 ==.
                           1562 ;	modbus.c:112: n += MbWrWord(reg,bf+n);
   04A9 F5*21              1563 	mov	_MbWr_n_1_1,a
   04AB 2B                 1564 	add	a,r3
   04AC F5*03              1565 	mov	_MbWrWord_PARM_2,a
   04AE E4                 1566 	clr	a
   04AF 3C                 1567 	addc	a,r4
   04B0 F5*04              1568 	mov	(_MbWrWord_PARM_2 + 1),a
   04B2 8D*05              1569 	mov	(_MbWrWord_PARM_2 + 2),r5
   04B4 85*17 82           1570 	mov	dpl,_MbWr_PARM_3
   04B7 85*18 83           1571 	mov	dph,(_MbWr_PARM_3 + 1)
   04BA C0 03              1572 	push	ar3
   04BC C0 04              1573 	push	ar4
   04BE C0 05              1574 	push	ar5
   04C0 12s01rFA           1575 	lcall	_MbWrWord
   04C3 AE 82              1576 	mov	r6,dpl
   04C5 D0 05              1577 	pop	ar5
   04C7 D0 04              1578 	pop	ar4
   04C9 D0 03              1579 	pop	ar3
   04CB EE                 1580 	mov	a,r6
   04CC 25*21              1581 	add	a,_MbWr_n_1_1
                    04CE   1582 	C$modbus.c$113$1$1 ==.
                           1583 ;	modbus.c:113: n += MbWrWord(nbr,bf+n);
   04CE F5*21              1584 	mov	_MbWr_n_1_1,a
   04D0 2B                 1585 	add	a,r3
   04D1 F5*03              1586 	mov	_MbWrWord_PARM_2,a
   04D3 E4                 1587 	clr	a
   04D4 3C                 1588 	addc	a,r4
   04D5 F5*04              1589 	mov	(_MbWrWord_PARM_2 + 1),a
   04D7 8D*05              1590 	mov	(_MbWrWord_PARM_2 + 2),r5
   04D9 85*19 82           1591 	mov	dpl,_MbWr_PARM_4
   04DC 85*1A 83           1592 	mov	dph,(_MbWr_PARM_4 + 1)
   04DF C0 03              1593 	push	ar3
   04E1 C0 04              1594 	push	ar4
   04E3 C0 05              1595 	push	ar5
   04E5 12s01rFA           1596 	lcall	_MbWrWord
   04E8 AE 82              1597 	mov	r6,dpl
   04EA D0 05              1598 	pop	ar5
   04EC D0 04              1599 	pop	ar4
   04EE D0 03              1600 	pop	ar3
   04F0 EE                 1601 	mov	a,r6
   04F1 25*21              1602 	add	a,_MbWr_n_1_1
   04F3 F5*21              1603 	mov	_MbWr_n_1_1,a
                    04F5   1604 	C$modbus.c$114$1$1 ==.
                           1605 ;	modbus.c:114: switch(fce)
   04F5 74 0F              1606 	mov	a,#0x0F
   04F7 B5*16 02           1607 	cjne	a,_MbWr_PARM_2,00115$
   04FA 80 0C              1608 	sjmp	00102$
   04FC                    1609 00115$:
   04FC 74 10              1610 	mov	a,#0x10
   04FE B5*16 22           1611 	cjne	a,_MbWr_PARM_2,00103$
                    0501   1612 	C$modbus.c$116$2$2 ==.
                           1613 ;	modbus.c:116: case 0x10: bytes = 2*nbr;break;
   0501 E5*19              1614 	mov	a,_MbWr_PARM_4
   0503 25 E0              1615 	add	a,acc
   0505 FE                 1616 	mov	r6,a
                    0506   1617 	C$modbus.c$117$2$2 ==.
                           1618 ;	modbus.c:117: case 0x0F: bytes = (nbr+7)/8;break;
   0506 80 1D              1619 	sjmp	00104$
   0508                    1620 00102$:
   0508 74 07              1621 	mov	a,#0x07
   050A 25*19              1622 	add	a,_MbWr_PARM_4
   050C FF                 1623 	mov	r7,a
   050D E4                 1624 	clr	a
   050E 35*1A              1625 	addc	a,(_MbWr_PARM_4 + 1)
   0510 C4                 1626 	swap	a
   0511 23                 1627 	rl	a
   0512 CF                 1628 	xch	a,r7
   0513 C4                 1629 	swap	a
   0514 23                 1630 	rl	a
   0515 54 1F              1631 	anl	a,#0x1f
   0517 6F                 1632 	xrl	a,r7
   0518 CF                 1633 	xch	a,r7
   0519 54 1F              1634 	anl	a,#0x1f
   051B CF                 1635 	xch	a,r7
   051C 6F                 1636 	xrl	a,r7
   051D CF                 1637 	xch	a,r7
   051E F8                 1638 	mov	r0,a
   051F 8F 06              1639 	mov	ar6,r7
                    0521   1640 	C$modbus.c$118$2$2 ==.
                           1641 ;	modbus.c:118: default  : bytes = 0;
   0521 80 02              1642 	sjmp	00104$
   0523                    1643 00103$:
   0523 7E 00              1644 	mov	r6,#0x00
                    0525   1645 	C$modbus.c$119$1$1 ==.
                           1646 ;	modbus.c:119: }
   0525                    1647 00104$:
                    0525   1648 	C$modbus.c$120$1$1 ==.
                           1649 ;	modbus.c:120: n += MbWrByte(bytes,bf+n);
   0525 E5*21              1650 	mov	a,_MbWr_n_1_1
   0527 2B                 1651 	add	a,r3
   0528 F5*00              1652 	mov	_MbWrByte_PARM_2,a
   052A E4                 1653 	clr	a
   052B 3C                 1654 	addc	a,r4
   052C F5*01              1655 	mov	(_MbWrByte_PARM_2 + 1),a
   052E 8D*02              1656 	mov	(_MbWrByte_PARM_2 + 2),r5
   0530 8E 82              1657 	mov	dpl,r6
   0532 C0 03              1658 	push	ar3
   0534 C0 04              1659 	push	ar4
   0536 C0 05              1660 	push	ar5
   0538 C0 06              1661 	push	ar6
   053A 12s01r98           1662 	lcall	_MbWrByte
   053D AF 82              1663 	mov	r7,dpl
   053F D0 06              1664 	pop	ar6
   0541 D0 05              1665 	pop	ar5
   0543 D0 04              1666 	pop	ar4
   0545 D0 03              1667 	pop	ar3
   0547 EF                 1668 	mov	a,r7
   0548 25*21              1669 	add	a,_MbWr_n_1_1
   054A F5*21              1670 	mov	_MbWr_n_1_1,a
                    054C   1671 	C$modbus.c$121$1$1 ==.
                           1672 ;	modbus.c:121: while(bytes--)
   054C AF*1B              1673 	mov	r7,_MbWr_PARM_5
   054E A8*1C              1674 	mov	r0,(_MbWr_PARM_5 + 1)
   0550 A9*1D              1675 	mov	r1,(_MbWr_PARM_5 + 2)
   0552                    1676 00105$:
   0552 8E 02              1677 	mov	ar2,r6
   0554 1E                 1678 	dec	r6
   0555 EA                 1679 	mov	a,r2
   0556 60 44              1680 	jz	00107$
                    0558   1681 	C$modbus.c$122$1$1 ==.
                           1682 ;	modbus.c:122: n += MbWrByte(*vals++,bf+n);
   0558 8F 82              1683 	mov	dpl,r7
   055A 88 83              1684 	mov	dph,r0
   055C 89 F0              1685 	mov	b,r1
   055E 12s00r00           1686 	lcall	__gptrget
   0561 FA                 1687 	mov	r2,a
   0562 A3                 1688 	inc	dptr
   0563 AF 82              1689 	mov	r7,dpl
   0565 A8 83              1690 	mov	r0,dph
   0567 E5*21              1691 	mov	a,_MbWr_n_1_1
   0569 2B                 1692 	add	a,r3
   056A F5*00              1693 	mov	_MbWrByte_PARM_2,a
   056C E4                 1694 	clr	a
   056D 3C                 1695 	addc	a,r4
   056E F5*01              1696 	mov	(_MbWrByte_PARM_2 + 1),a
   0570 8D*02              1697 	mov	(_MbWrByte_PARM_2 + 2),r5
   0572 8A 82              1698 	mov	dpl,r2
   0574 C0 03              1699 	push	ar3
   0576 C0 04              1700 	push	ar4
   0578 C0 05              1701 	push	ar5
   057A C0 06              1702 	push	ar6
   057C C0 07              1703 	push	ar7
   057E C0 00              1704 	push	ar0
   0580 C0 01              1705 	push	ar1
   0582 12s01r98           1706 	lcall	_MbWrByte
   0585 AA 82              1707 	mov	r2,dpl
   0587 D0 01              1708 	pop	ar1
   0589 D0 00              1709 	pop	ar0
   058B D0 07              1710 	pop	ar7
   058D D0 06              1711 	pop	ar6
   058F D0 05              1712 	pop	ar5
   0591 D0 04              1713 	pop	ar4
   0593 D0 03              1714 	pop	ar3
   0595 EA                 1715 	mov	a,r2
   0596 25*21              1716 	add	a,_MbWr_n_1_1
   0598 F5*21              1717 	mov	_MbWr_n_1_1,a
   059A 80 B6              1718 	sjmp	00105$
   059C                    1719 00107$:
                    059C   1720 	C$modbus.c$123$1$1 ==.
                           1721 ;	modbus.c:123: return n;
   059C 85*21 82           1722 	mov	dpl,_MbWr_n_1_1
                    059F   1723 	C$modbus.c$124$1$1 ==.
                    059F   1724 	XG$MbWr$0$0 ==.
   059F 22                 1725 	ret
                           1726 ;------------------------------------------------------------
                           1727 ;Allocation info for local variables in function 'MbAnsRd'
                           1728 ;------------------------------------------------------------
                           1729 ;fce                       Allocated with name '_MbAnsRd_PARM_2'
                           1730 ;bytes                     Allocated with name '_MbAnsRd_PARM_3'
                           1731 ;vals                      Allocated with name '_MbAnsRd_PARM_4'
                           1732 ;bf                        Allocated with name '_MbAnsRd_PARM_5'
                           1733 ;adr                       Allocated to registers r2 
                           1734 ;n                         Allocated with name '_MbAnsRd_n_1_1'
                           1735 ;------------------------------------------------------------
                    05A0   1736 	G$MbAnsRd$0$0 ==.
                    05A0   1737 	C$modbus.c$127$1$1 ==.
                           1738 ;	modbus.c:127: byte MbAnsRd(byte adr, byte fce, byte bytes, byte *vals,byte *bf)
                           1739 ;	-----------------------------------------
                           1740 ;	 function MbAnsRd
                           1741 ;	-----------------------------------------
   05A0                    1742 _MbAnsRd:
   05A0 AA 82              1743 	mov	r2,dpl
                    05A2   1744 	C$modbus.c$130$1$1 ==.
                           1745 ;	modbus.c:130: *bf = ':';
   05A2 AB*27              1746 	mov	r3,_MbAnsRd_PARM_5
   05A4 AC*28              1747 	mov	r4,(_MbAnsRd_PARM_5 + 1)
   05A6 AD*29              1748 	mov	r5,(_MbAnsRd_PARM_5 + 2)
   05A8 8B 82              1749 	mov	dpl,r3
   05AA 8C 83              1750 	mov	dph,r4
   05AC 8D F0              1751 	mov	b,r5
   05AE 74 3A              1752 	mov	a,#0x3A
   05B0 12s00r00           1753 	lcall	__gptrput
                    05B3   1754 	C$modbus.c$131$1$1 ==.
                           1755 ;	modbus.c:131: n += MbWrByte(adr,bf+n);
   05B3 74 01              1756 	mov	a,#0x01
   05B5 2B                 1757 	add	a,r3
   05B6 F5*00              1758 	mov	_MbWrByte_PARM_2,a
   05B8 E4                 1759 	clr	a
   05B9 3C                 1760 	addc	a,r4
   05BA F5*01              1761 	mov	(_MbWrByte_PARM_2 + 1),a
   05BC 8D*02              1762 	mov	(_MbWrByte_PARM_2 + 2),r5
   05BE 8A 82              1763 	mov	dpl,r2
   05C0 C0 03              1764 	push	ar3
   05C2 C0 04              1765 	push	ar4
   05C4 C0 05              1766 	push	ar5
   05C6 12s01r98           1767 	lcall	_MbWrByte
   05C9 AA 82              1768 	mov	r2,dpl
   05CB D0 05              1769 	pop	ar5
   05CD D0 04              1770 	pop	ar4
   05CF D0 03              1771 	pop	ar3
   05D1 EA                 1772 	mov	a,r2
   05D2 04                 1773 	inc	a
                    05D3   1774 	C$modbus.c$132$1$1 ==.
                           1775 ;	modbus.c:132: n += MbWrByte(fce,bf+n);
   05D3 F5*2A              1776 	mov	_MbAnsRd_n_1_1,a
   05D5 2B                 1777 	add	a,r3
   05D6 F5*00              1778 	mov	_MbWrByte_PARM_2,a
   05D8 E4                 1779 	clr	a
   05D9 3C                 1780 	addc	a,r4
   05DA F5*01              1781 	mov	(_MbWrByte_PARM_2 + 1),a
   05DC 8D*02              1782 	mov	(_MbWrByte_PARM_2 + 2),r5
   05DE 85*22 82           1783 	mov	dpl,_MbAnsRd_PARM_2
   05E1 C0 03              1784 	push	ar3
   05E3 C0 04              1785 	push	ar4
   05E5 C0 05              1786 	push	ar5
   05E7 12s01r98           1787 	lcall	_MbWrByte
   05EA AE 82              1788 	mov	r6,dpl
   05EC D0 05              1789 	pop	ar5
   05EE D0 04              1790 	pop	ar4
   05F0 D0 03              1791 	pop	ar3
   05F2 EE                 1792 	mov	a,r6
   05F3 25*2A              1793 	add	a,_MbAnsRd_n_1_1
                    05F5   1794 	C$modbus.c$133$1$1 ==.
                           1795 ;	modbus.c:133: n += MbWrByte(bytes,bf+n);
   05F5 F5*2A              1796 	mov	_MbAnsRd_n_1_1,a
   05F7 2B                 1797 	add	a,r3
   05F8 F5*00              1798 	mov	_MbWrByte_PARM_2,a
   05FA E4                 1799 	clr	a
   05FB 3C                 1800 	addc	a,r4
   05FC F5*01              1801 	mov	(_MbWrByte_PARM_2 + 1),a
   05FE 8D*02              1802 	mov	(_MbWrByte_PARM_2 + 2),r5
   0600 85*23 82           1803 	mov	dpl,_MbAnsRd_PARM_3
   0603 C0 03              1804 	push	ar3
   0605 C0 04              1805 	push	ar4
   0607 C0 05              1806 	push	ar5
   0609 12s01r98           1807 	lcall	_MbWrByte
   060C AE 82              1808 	mov	r6,dpl
   060E D0 05              1809 	pop	ar5
   0610 D0 04              1810 	pop	ar4
   0612 D0 03              1811 	pop	ar3
   0614 EE                 1812 	mov	a,r6
   0615 25*2A              1813 	add	a,_MbAnsRd_n_1_1
   0617 F5*2A              1814 	mov	_MbAnsRd_n_1_1,a
                    0619   1815 	C$modbus.c$134$1$1 ==.
                           1816 ;	modbus.c:134: while(bytes--)
   0619 AE*24              1817 	mov	r6,_MbAnsRd_PARM_4
   061B AF*25              1818 	mov	r7,(_MbAnsRd_PARM_4 + 1)
   061D A8*26              1819 	mov	r0,(_MbAnsRd_PARM_4 + 2)
   061F A9*23              1820 	mov	r1,_MbAnsRd_PARM_3
   0621                    1821 00101$:
   0621 89 02              1822 	mov	ar2,r1
   0623 19                 1823 	dec	r1
   0624 EA                 1824 	mov	a,r2
   0625 60 44              1825 	jz	00103$
                    0627   1826 	C$modbus.c$135$1$1 ==.
                           1827 ;	modbus.c:135: n += MbWrByte(*vals++,bf+n);
   0627 8E 82              1828 	mov	dpl,r6
   0629 8F 83              1829 	mov	dph,r7
   062B 88 F0              1830 	mov	b,r0
   062D 12s00r00           1831 	lcall	__gptrget
   0630 FA                 1832 	mov	r2,a
   0631 A3                 1833 	inc	dptr
   0632 AE 82              1834 	mov	r6,dpl
   0634 AF 83              1835 	mov	r7,dph
   0636 E5*2A              1836 	mov	a,_MbAnsRd_n_1_1
   0638 2B                 1837 	add	a,r3
   0639 F5*00              1838 	mov	_MbWrByte_PARM_2,a
   063B E4                 1839 	clr	a
   063C 3C                 1840 	addc	a,r4
   063D F5*01              1841 	mov	(_MbWrByte_PARM_2 + 1),a
   063F 8D*02              1842 	mov	(_MbWrByte_PARM_2 + 2),r5
   0641 8A 82              1843 	mov	dpl,r2
   0643 C0 03              1844 	push	ar3
   0645 C0 04              1845 	push	ar4
   0647 C0 05              1846 	push	ar5
   0649 C0 06              1847 	push	ar6
   064B C0 07              1848 	push	ar7
   064D C0 00              1849 	push	ar0
   064F C0 01              1850 	push	ar1
   0651 12s01r98           1851 	lcall	_MbWrByte
   0654 AA 82              1852 	mov	r2,dpl
   0656 D0 01              1853 	pop	ar1
   0658 D0 00              1854 	pop	ar0
   065A D0 07              1855 	pop	ar7
   065C D0 06              1856 	pop	ar6
   065E D0 05              1857 	pop	ar5
   0660 D0 04              1858 	pop	ar4
   0662 D0 03              1859 	pop	ar3
   0664 EA                 1860 	mov	a,r2
   0665 25*2A              1861 	add	a,_MbAnsRd_n_1_1
   0667 F5*2A              1862 	mov	_MbAnsRd_n_1_1,a
   0669 80 B6              1863 	sjmp	00101$
   066B                    1864 00103$:
                    066B   1865 	C$modbus.c$136$1$1 ==.
                           1866 ;	modbus.c:136: return n;
   066B 85*2A 82           1867 	mov	dpl,_MbAnsRd_n_1_1
                    066E   1868 	C$modbus.c$137$1$1 ==.
                    066E   1869 	XG$MbAnsRd$0$0 ==.
   066E 22                 1870 	ret
                           1871 ;------------------------------------------------------------
                           1872 ;Allocation info for local variables in function 'MbAnsErr'
                           1873 ;------------------------------------------------------------
                           1874 ;fce                       Allocated with name '_MbAnsErr_PARM_2'
                           1875 ;er                        Allocated with name '_MbAnsErr_PARM_3'
                           1876 ;bf                        Allocated with name '_MbAnsErr_PARM_4'
                           1877 ;adr                       Allocated to registers r2 
                           1878 ;n                         Allocated to registers r2 
                           1879 ;------------------------------------------------------------
                    066F   1880 	G$MbAnsErr$0$0 ==.
                    066F   1881 	C$modbus.c$140$1$1 ==.
                           1882 ;	modbus.c:140: byte MbAnsErr(byte adr,byte fce,byte er,byte *bf)
                           1883 ;	-----------------------------------------
                           1884 ;	 function MbAnsErr
                           1885 ;	-----------------------------------------
   066F                    1886 _MbAnsErr:
   066F AA 82              1887 	mov	r2,dpl
                    0671   1888 	C$modbus.c$144$1$1 ==.
                           1889 ;	modbus.c:144: *bf = ':';
   0671 AB*2D              1890 	mov	r3,_MbAnsErr_PARM_4
   0673 AC*2E              1891 	mov	r4,(_MbAnsErr_PARM_4 + 1)
   0675 AD*2F              1892 	mov	r5,(_MbAnsErr_PARM_4 + 2)
   0677 8B 82              1893 	mov	dpl,r3
   0679 8C 83              1894 	mov	dph,r4
   067B 8D F0              1895 	mov	b,r5
   067D 74 3A              1896 	mov	a,#0x3A
   067F 12s00r00           1897 	lcall	__gptrput
                    0682   1898 	C$modbus.c$145$1$1 ==.
                           1899 ;	modbus.c:145: n += MbWrByte(adr,bf+n);
   0682 74 01              1900 	mov	a,#0x01
   0684 2B                 1901 	add	a,r3
   0685 F5*00              1902 	mov	_MbWrByte_PARM_2,a
   0687 E4                 1903 	clr	a
   0688 3C                 1904 	addc	a,r4
   0689 F5*01              1905 	mov	(_MbWrByte_PARM_2 + 1),a
   068B 8D*02              1906 	mov	(_MbWrByte_PARM_2 + 2),r5
   068D 8A 82              1907 	mov	dpl,r2
   068F C0 03              1908 	push	ar3
   0691 C0 04              1909 	push	ar4
   0693 C0 05              1910 	push	ar5
   0695 12s01r98           1911 	lcall	_MbWrByte
   0698 AA 82              1912 	mov	r2,dpl
   069A D0 05              1913 	pop	ar5
   069C D0 04              1914 	pop	ar4
   069E D0 03              1915 	pop	ar3
   06A0 0A                 1916 	inc	r2
                    06A1   1917 	C$modbus.c$146$1$1 ==.
                           1918 ;	modbus.c:146: n += MbWrByte(fce,bf+n);
   06A1 EA                 1919 	mov	a,r2
   06A2 2B                 1920 	add	a,r3
   06A3 F5*00              1921 	mov	_MbWrByte_PARM_2,a
   06A5 E4                 1922 	clr	a
   06A6 3C                 1923 	addc	a,r4
   06A7 F5*01              1924 	mov	(_MbWrByte_PARM_2 + 1),a
   06A9 8D*02              1925 	mov	(_MbWrByte_PARM_2 + 2),r5
   06AB 85*2B 82           1926 	mov	dpl,_MbAnsErr_PARM_2
   06AE C0 02              1927 	push	ar2
   06B0 C0 03              1928 	push	ar3
   06B2 C0 04              1929 	push	ar4
   06B4 C0 05              1930 	push	ar5
   06B6 12s01r98           1931 	lcall	_MbWrByte
   06B9 AE 82              1932 	mov	r6,dpl
   06BB D0 05              1933 	pop	ar5
   06BD D0 04              1934 	pop	ar4
   06BF D0 03              1935 	pop	ar3
   06C1 D0 02              1936 	pop	ar2
   06C3 EE                 1937 	mov	a,r6
   06C4 2A                 1938 	add	a,r2
                    06C5   1939 	C$modbus.c$147$1$1 ==.
                           1940 ;	modbus.c:147: n += MbWrByte(er,bf+n);
   06C5 FA                 1941 	mov	r2,a
   06C6 2B                 1942 	add	a,r3
   06C7 F5*00              1943 	mov	_MbWrByte_PARM_2,a
   06C9 E4                 1944 	clr	a
   06CA 3C                 1945 	addc	a,r4
   06CB F5*01              1946 	mov	(_MbWrByte_PARM_2 + 1),a
   06CD 8D*02              1947 	mov	(_MbWrByte_PARM_2 + 2),r5
   06CF 85*2C 82           1948 	mov	dpl,_MbAnsErr_PARM_3
   06D2 C0 02              1949 	push	ar2
   06D4 12s01r98           1950 	lcall	_MbWrByte
   06D7 AB 82              1951 	mov	r3,dpl
   06D9 D0 02              1952 	pop	ar2
   06DB EB                 1953 	mov	a,r3
   06DC 2A                 1954 	add	a,r2
                    06DD   1955 	C$modbus.c$148$1$1 ==.
                           1956 ;	modbus.c:148: return n;
                    06DD   1957 	C$modbus.c$149$1$1 ==.
                    06DD   1958 	XG$MbAnsErr$0$0 ==.
   06DD F5 82              1959 	mov	dpl,a
   06DF 22                 1960 	ret
                           1961 ;------------------------------------------------------------
                           1962 ;Allocation info for local variables in function 'MrtuCrc'
                           1963 ;------------------------------------------------------------
                           1964 ;len                       Allocated with name '_MrtuCrc_PARM_2'
                           1965 ;bf                        Allocated to registers r2 r3 r4 
                           1966 ;CRCHi                     Allocated to registers r5 
                           1967 ;CRCLo                     Allocated to registers r6 
                           1968 ;index                     Allocated to registers r0 
                           1969 ;------------------------------------------------------------
                    06E0   1970 	G$MrtuCrc$0$0 ==.
                    06E0   1971 	C$modbus.c$194$1$1 ==.
                           1972 ;	modbus.c:194: word MrtuCrc(byte * bf, byte len )
                           1973 ;	-----------------------------------------
                           1974 ;	 function MrtuCrc
                           1975 ;	-----------------------------------------
   06E0                    1976 _MrtuCrc:
   06E0 AA 82              1977 	mov	r2,dpl
   06E2 AB 83              1978 	mov	r3,dph
   06E4 AC F0              1979 	mov	r4,b
                    06E6   1980 	C$modbus.c$196$1$1 ==.
                           1981 ;	modbus.c:196: byte CRCHi = 0xFF ;  /* MSB CRC */
   06E6 7D FF              1982 	mov	r5,#0xFF
                    06E8   1983 	C$modbus.c$197$1$1 ==.
                           1984 ;	modbus.c:197: byte CRCLo = 0xFF ;  /* LSB CRC  */
   06E8 7E FF              1985 	mov	r6,#0xFF
                    06EA   1986 	C$modbus.c$199$2$2 ==.
                           1987 ;	modbus.c:199: while (len--)
   06EA AF*00              1988 	mov	r7,_MrtuCrc_PARM_2
   06EC                    1989 00101$:
   06EC 8F 00              1990 	mov	ar0,r7
   06EE 1F                 1991 	dec	r7
   06EF E8                 1992 	mov	a,r0
   06F0 60 22              1993 	jz	00103$
                    06F2   1994 	C$modbus.c$201$2$2 ==.
                           1995 ;	modbus.c:201: index = CRCLo ^ *bf++ ;
   06F2 8A 82              1996 	mov	dpl,r2
   06F4 8B 83              1997 	mov	dph,r3
   06F6 8C F0              1998 	mov	b,r4
   06F8 12s00r00           1999 	lcall	__gptrget
   06FB F8                 2000 	mov	r0,a
   06FC A3                 2001 	inc	dptr
   06FD AA 82              2002 	mov	r2,dpl
   06FF AB 83              2003 	mov	r3,dph
   0701 EE                 2004 	mov	a,r6
   0702 62 00              2005 	xrl	ar0,a
                    0704   2006 	C$modbus.c$202$2$2 ==.
                           2007 ;	modbus.c:202: CRCLo = CRCHi ^ tabCRCHi[index] ;
   0704 E8                 2008 	mov	a,r0
   0705 90s00r00           2009 	mov	dptr,#_tabCRCHi
   0708 93                 2010 	movc	a,@a+dptr
   0709 F9                 2011 	mov	r1,a
   070A 6D                 2012 	xrl	a,r5
   070B FE                 2013 	mov	r6,a
                    070C   2014 	C$modbus.c$203$2$2 ==.
                           2015 ;	modbus.c:203: CRCHi = tabCRCLo[index] ;
   070C E8                 2016 	mov	a,r0
   070D 90s01r00           2017 	mov	dptr,#_tabCRCLo
   0710 93                 2018 	movc	a,@a+dptr
   0711 FD                 2019 	mov	r5,a
   0712 80 D8              2020 	sjmp	00101$
   0714                    2021 00103$:
                    0714   2022 	C$modbus.c$206$1$1 ==.
                           2023 ;	modbus.c:206: return (CRCHi << 8 | CRCLo) ;
   0714 8D 02              2024 	mov	ar2,r5
   0716 E4                 2025 	clr	a
   0717 FD                 2026 	mov	r5,a
   0718 FB                 2027 	mov	r3,a
   0719 EE                 2028 	mov	a,r6
   071A 4D                 2029 	orl	a,r5
   071B F5 82              2030 	mov	dpl,a
   071D EB                 2031 	mov	a,r3
   071E 4A                 2032 	orl	a,r2
   071F F5 83              2033 	mov	dph,a
                    0721   2034 	C$modbus.c$207$1$1 ==.
                    0721   2035 	XG$MrtuCrc$0$0 ==.
   0721 22                 2036 	ret
                           2037 ;------------------------------------------------------------
                           2038 ;Allocation info for local variables in function 'MrtuRdCrc'
                           2039 ;------------------------------------------------------------
                           2040 ;bf                        Allocated to registers r2 r3 r4 
                           2041 ;------------------------------------------------------------
                    0722   2042 	G$MrtuRdCrc$0$0 ==.
                    0722   2043 	C$modbus.c$209$1$1 ==.
                           2044 ;	modbus.c:209: word MrtuRdCrc(byte * bf)
                           2045 ;	-----------------------------------------
                           2046 ;	 function MrtuRdCrc
                           2047 ;	-----------------------------------------
   0722                    2048 _MrtuRdCrc:
   0722 AA 82              2049 	mov	r2,dpl
   0724 AB 83              2050 	mov	r3,dph
   0726 AC F0              2051 	mov	r4,b
                    0728   2052 	C$modbus.c$211$1$1 ==.
                           2053 ;	modbus.c:211: return ( *(bf+1)<<8 | *bf);
   0728 74 01              2054 	mov	a,#0x01
   072A 2A                 2055 	add	a,r2
   072B FD                 2056 	mov	r5,a
   072C E4                 2057 	clr	a
   072D 3B                 2058 	addc	a,r3
   072E FE                 2059 	mov	r6,a
   072F 8C 07              2060 	mov	ar7,r4
   0731 8D 82              2061 	mov	dpl,r5
   0733 8E 83              2062 	mov	dph,r6
   0735 8F F0              2063 	mov	b,r7
   0737 12s00r00           2064 	lcall	__gptrget
   073A FE                 2065 	mov	r6,a
   073B 7D 00              2066 	mov	r5,#0x00
   073D 8A 82              2067 	mov	dpl,r2
   073F 8B 83              2068 	mov	dph,r3
   0741 8C F0              2069 	mov	b,r4
   0743 12s00r00           2070 	lcall	__gptrget
   0746 7B 00              2071 	mov	r3,#0x00
   0748 4D                 2072 	orl	a,r5
   0749 F5 82              2073 	mov	dpl,a
   074B EB                 2074 	mov	a,r3
   074C 4E                 2075 	orl	a,r6
   074D F5 83              2076 	mov	dph,a
                    074F   2077 	C$modbus.c$212$1$1 ==.
                    074F   2078 	XG$MrtuRdCrc$0$0 ==.
   074F 22                 2079 	ret
                           2080 ;------------------------------------------------------------
                           2081 ;Allocation info for local variables in function 'MrtuWrCrc'
                           2082 ;------------------------------------------------------------
                           2083 ;bf                        Allocated with name '_MrtuWrCrc_PARM_2'
                           2084 ;crc                       Allocated to registers r2 r3 
                           2085 ;------------------------------------------------------------
                    0750   2086 	G$MrtuWrCrc$0$0 ==.
                    0750   2087 	C$modbus.c$214$1$1 ==.
                           2088 ;	modbus.c:214: byte MrtuWrCrc(word crc,byte * bf)
                           2089 ;	-----------------------------------------
                           2090 ;	 function MrtuWrCrc
                           2091 ;	-----------------------------------------
   0750                    2092 _MrtuWrCrc:
   0750 AA 82              2093 	mov	r2,dpl
   0752 AB 83              2094 	mov	r3,dph
                    0754   2095 	C$modbus.c$216$1$1 ==.
                           2096 ;	modbus.c:216: *bf++ = crc;
   0754 AC*00              2097 	mov	r4,_MrtuWrCrc_PARM_2
   0756 AD*01              2098 	mov	r5,(_MrtuWrCrc_PARM_2 + 1)
   0758 AE*02              2099 	mov	r6,(_MrtuWrCrc_PARM_2 + 2)
   075A 8A 07              2100 	mov	ar7,r2
   075C 8C 82              2101 	mov	dpl,r4
   075E 8D 83              2102 	mov	dph,r5
   0760 8E F0              2103 	mov	b,r6
   0762 EF                 2104 	mov	a,r7
   0763 12s00r00           2105 	lcall	__gptrput
   0766 74 01              2106 	mov	a,#0x01
   0768 2C                 2107 	add	a,r4
   0769 F5*00              2108 	mov	_MrtuWrCrc_PARM_2,a
   076B E4                 2109 	clr	a
   076C 3D                 2110 	addc	a,r5
   076D F5*01              2111 	mov	(_MrtuWrCrc_PARM_2 + 1),a
   076F 8E*02              2112 	mov	(_MrtuWrCrc_PARM_2 + 2),r6
                    0771   2113 	C$modbus.c$217$1$1 ==.
                           2114 ;	modbus.c:217: *bf   = crc>>8;
   0771 AC*00              2115 	mov	r4,_MrtuWrCrc_PARM_2
   0773 AD*01              2116 	mov	r5,(_MrtuWrCrc_PARM_2 + 1)
   0775 AE*02              2117 	mov	r6,(_MrtuWrCrc_PARM_2 + 2)
   0777 8B 02              2118 	mov	ar2,r3
   0779 8C 82              2119 	mov	dpl,r4
   077B 8D 83              2120 	mov	dph,r5
   077D 8E F0              2121 	mov	b,r6
   077F EA                 2122 	mov	a,r2
   0780 12s00r00           2123 	lcall	__gptrput
                    0783   2124 	C$modbus.c$218$1$1 ==.
                           2125 ;	modbus.c:218: return 2;
   0783 75 82 02           2126 	mov	dpl,#0x02
                    0786   2127 	C$modbus.c$220$1$1 ==.
                    0786   2128 	XG$MrtuWrCrc$0$0 ==.
   0786 22                 2129 	ret
                           2130 ;------------------------------------------------------------
                           2131 ;Allocation info for local variables in function 'MrtuAnsErr'
                           2132 ;------------------------------------------------------------
                           2133 ;fce                       Allocated with name '_MrtuAnsErr_PARM_2'
                           2134 ;err                       Allocated with name '_MrtuAnsErr_PARM_3'
                           2135 ;bf                        Allocated with name '_MrtuAnsErr_PARM_4'
                           2136 ;adr                       Allocated to registers r2 
                           2137 ;------------------------------------------------------------
                    0787   2138 	G$MrtuAnsErr$0$0 ==.
                    0787   2139 	C$modbus.c$223$1$1 ==.
                           2140 ;	modbus.c:223: byte MrtuAnsErr(byte adr,byte fce,byte err,byte *bf)
                           2141 ;	-----------------------------------------
                           2142 ;	 function MrtuAnsErr
                           2143 ;	-----------------------------------------
   0787                    2144 _MrtuAnsErr:
   0787 AA 82              2145 	mov	r2,dpl
                    0789   2146 	C$modbus.c$225$1$1 ==.
                           2147 ;	modbus.c:225: *bf++=adr;
   0789 AB*02              2148 	mov	r3,_MrtuAnsErr_PARM_4
   078B AC*03              2149 	mov	r4,(_MrtuAnsErr_PARM_4 + 1)
   078D AD*04              2150 	mov	r5,(_MrtuAnsErr_PARM_4 + 2)
   078F 8B 82              2151 	mov	dpl,r3
   0791 8C 83              2152 	mov	dph,r4
   0793 8D F0              2153 	mov	b,r5
   0795 EA                 2154 	mov	a,r2
   0796 12s00r00           2155 	lcall	__gptrput
   0799 74 01              2156 	mov	a,#0x01
   079B 2B                 2157 	add	a,r3
   079C F5*02              2158 	mov	_MrtuAnsErr_PARM_4,a
   079E E4                 2159 	clr	a
   079F 3C                 2160 	addc	a,r4
   07A0 F5*03              2161 	mov	(_MrtuAnsErr_PARM_4 + 1),a
   07A2 8D*04              2162 	mov	(_MrtuAnsErr_PARM_4 + 2),r5
                    07A4   2163 	C$modbus.c$226$1$1 ==.
                           2164 ;	modbus.c:226: *bf++=fce;
   07A4 AA*02              2165 	mov	r2,_MrtuAnsErr_PARM_4
   07A6 AB*03              2166 	mov	r3,(_MrtuAnsErr_PARM_4 + 1)
   07A8 AC*04              2167 	mov	r4,(_MrtuAnsErr_PARM_4 + 2)
   07AA 8A 82              2168 	mov	dpl,r2
   07AC 8B 83              2169 	mov	dph,r3
   07AE 8C F0              2170 	mov	b,r4
   07B0 E5*00              2171 	mov	a,_MrtuAnsErr_PARM_2
   07B2 12s00r00           2172 	lcall	__gptrput
   07B5 74 01              2173 	mov	a,#0x01
   07B7 2A                 2174 	add	a,r2
   07B8 F5*02              2175 	mov	_MrtuAnsErr_PARM_4,a
   07BA E4                 2176 	clr	a
   07BB 3B                 2177 	addc	a,r3
   07BC F5*03              2178 	mov	(_MrtuAnsErr_PARM_4 + 1),a
   07BE 8C*04              2179 	mov	(_MrtuAnsErr_PARM_4 + 2),r4
                    07C0   2180 	C$modbus.c$227$1$1 ==.
                           2181 ;	modbus.c:227: *bf++=err;
   07C0 AA*02              2182 	mov	r2,_MrtuAnsErr_PARM_4
   07C2 AB*03              2183 	mov	r3,(_MrtuAnsErr_PARM_4 + 1)
   07C4 AC*04              2184 	mov	r4,(_MrtuAnsErr_PARM_4 + 2)
   07C6 8A 82              2185 	mov	dpl,r2
   07C8 8B 83              2186 	mov	dph,r3
   07CA 8C F0              2187 	mov	b,r4
   07CC E5*01              2188 	mov	a,_MrtuAnsErr_PARM_3
   07CE 12s00r00           2189 	lcall	__gptrput
                    07D1   2190 	C$modbus.c$228$1$1 ==.
                           2191 ;	modbus.c:228: return 3;
   07D1 75 82 03           2192 	mov	dpl,#0x03
                    07D4   2193 	C$modbus.c$229$1$1 ==.
                    07D4   2194 	XG$MrtuAnsErr$0$0 ==.
   07D4 22                 2195 	ret
                           2196 ;------------------------------------------------------------
                           2197 ;Allocation info for local variables in function 'MrtuAnsRd'
                           2198 ;------------------------------------------------------------
                           2199 ;fce                       Allocated with name '_MrtuAnsRd_PARM_2'
                           2200 ;bytes                     Allocated with name '_MrtuAnsRd_PARM_3'
                           2201 ;vals                      Allocated with name '_MrtuAnsRd_PARM_4'
                           2202 ;bf                        Allocated with name '_MrtuAnsRd_PARM_5'
                           2203 ;adr                       Allocated to registers r2 
                           2204 ;n                         Allocated with name '_MrtuAnsRd_n_1_1'
                           2205 ;------------------------------------------------------------
                    07D5   2206 	G$MrtuAnsRd$0$0 ==.
                    07D5   2207 	C$modbus.c$230$1$1 ==.
                           2208 ;	modbus.c:230: byte MrtuAnsRd(byte adr,byte fce,byte bytes,byte *vals,byte *bf)
                           2209 ;	-----------------------------------------
                           2210 ;	 function MrtuAnsRd
                           2211 ;	-----------------------------------------
   07D5                    2212 _MrtuAnsRd:
   07D5 AA 82              2213 	mov	r2,dpl
                    07D7   2214 	C$modbus.c$232$1$1 ==.
                           2215 ;	modbus.c:232: byte n=bytes+3;
   07D7 74 03              2216 	mov	a,#0x03
   07D9 25*01              2217 	add	a,_MrtuAnsRd_PARM_3
   07DB F5*08              2218 	mov	_MrtuAnsRd_n_1_1,a
                    07DD   2219 	C$modbus.c$233$1$1 ==.
                           2220 ;	modbus.c:233: *bf++=adr;
   07DD AC*05              2221 	mov	r4,_MrtuAnsRd_PARM_5
   07DF AD*06              2222 	mov	r5,(_MrtuAnsRd_PARM_5 + 1)
   07E1 AE*07              2223 	mov	r6,(_MrtuAnsRd_PARM_5 + 2)
   07E3 8C 82              2224 	mov	dpl,r4
   07E5 8D 83              2225 	mov	dph,r5
   07E7 8E F0              2226 	mov	b,r6
   07E9 EA                 2227 	mov	a,r2
   07EA 12s00r00           2228 	lcall	__gptrput
   07ED 74 01              2229 	mov	a,#0x01
   07EF 2C                 2230 	add	a,r4
   07F0 F5*05              2231 	mov	_MrtuAnsRd_PARM_5,a
   07F2 E4                 2232 	clr	a
   07F3 3D                 2233 	addc	a,r5
   07F4 F5*06              2234 	mov	(_MrtuAnsRd_PARM_5 + 1),a
   07F6 8E*07              2235 	mov	(_MrtuAnsRd_PARM_5 + 2),r6
                    07F8   2236 	C$modbus.c$234$1$1 ==.
                           2237 ;	modbus.c:234: *bf++=fce;
   07F8 AA*05              2238 	mov	r2,_MrtuAnsRd_PARM_5
   07FA AC*06              2239 	mov	r4,(_MrtuAnsRd_PARM_5 + 1)
   07FC AD*07              2240 	mov	r5,(_MrtuAnsRd_PARM_5 + 2)
   07FE 8A 82              2241 	mov	dpl,r2
   0800 8C 83              2242 	mov	dph,r4
   0802 8D F0              2243 	mov	b,r5
   0804 E5*00              2244 	mov	a,_MrtuAnsRd_PARM_2
   0806 12s00r00           2245 	lcall	__gptrput
   0809 74 01              2246 	mov	a,#0x01
   080B 2A                 2247 	add	a,r2
   080C F5*05              2248 	mov	_MrtuAnsRd_PARM_5,a
   080E E4                 2249 	clr	a
   080F 3C                 2250 	addc	a,r4
   0810 F5*06              2251 	mov	(_MrtuAnsRd_PARM_5 + 1),a
   0812 8D*07              2252 	mov	(_MrtuAnsRd_PARM_5 + 2),r5
                    0814   2253 	C$modbus.c$235$1$1 ==.
                           2254 ;	modbus.c:235: *bf++=bytes;
   0814 AA*05              2255 	mov	r2,_MrtuAnsRd_PARM_5
   0816 AC*06              2256 	mov	r4,(_MrtuAnsRd_PARM_5 + 1)
   0818 AD*07              2257 	mov	r5,(_MrtuAnsRd_PARM_5 + 2)
   081A 8A 82              2258 	mov	dpl,r2
   081C 8C 83              2259 	mov	dph,r4
   081E 8D F0              2260 	mov	b,r5
   0820 E5*01              2261 	mov	a,_MrtuAnsRd_PARM_3
   0822 12s00r00           2262 	lcall	__gptrput
   0825 74 01              2263 	mov	a,#0x01
   0827 2A                 2264 	add	a,r2
   0828 F5*05              2265 	mov	_MrtuAnsRd_PARM_5,a
   082A E4                 2266 	clr	a
   082B 3C                 2267 	addc	a,r4
   082C F5*06              2268 	mov	(_MrtuAnsRd_PARM_5 + 1),a
   082E 8D*07              2269 	mov	(_MrtuAnsRd_PARM_5 + 2),r5
                    0830   2270 	C$modbus.c$236$1$1 ==.
                           2271 ;	modbus.c:236: while(bytes--) *bf++ = *vals++;
   0830 AA*02              2272 	mov	r2,_MrtuAnsRd_PARM_4
   0832 AC*03              2273 	mov	r4,(_MrtuAnsRd_PARM_4 + 1)
   0834 AD*04              2274 	mov	r5,(_MrtuAnsRd_PARM_4 + 2)
   0836 AE*05              2275 	mov	r6,_MrtuAnsRd_PARM_5
   0838 AF*06              2276 	mov	r7,(_MrtuAnsRd_PARM_5 + 1)
   083A A8*07              2277 	mov	r0,(_MrtuAnsRd_PARM_5 + 2)
   083C A9*01              2278 	mov	r1,_MrtuAnsRd_PARM_3
   083E                    2279 00101$:
   083E 89 03              2280 	mov	ar3,r1
   0840 19                 2281 	dec	r1
   0841 EB                 2282 	mov	a,r3
   0842 60 20              2283 	jz	00103$
   0844 8A 82              2284 	mov	dpl,r2
   0846 8C 83              2285 	mov	dph,r4
   0848 8D F0              2286 	mov	b,r5
   084A 12s00r00           2287 	lcall	__gptrget
   084D FB                 2288 	mov	r3,a
   084E A3                 2289 	inc	dptr
   084F AA 82              2290 	mov	r2,dpl
   0851 AC 83              2291 	mov	r4,dph
   0853 8E 82              2292 	mov	dpl,r6
   0855 8F 83              2293 	mov	dph,r7
   0857 88 F0              2294 	mov	b,r0
   0859 EB                 2295 	mov	a,r3
   085A 12s00r00           2296 	lcall	__gptrput
   085D A3                 2297 	inc	dptr
   085E AE 82              2298 	mov	r6,dpl
   0860 AF 83              2299 	mov	r7,dph
   0862 80 DA              2300 	sjmp	00101$
   0864                    2301 00103$:
                    0864   2302 	C$modbus.c$237$1$1 ==.
                           2303 ;	modbus.c:237: return n;
   0864 85*08 82           2304 	mov	dpl,_MrtuAnsRd_n_1_1
                    0867   2305 	C$modbus.c$238$1$1 ==.
                    0867   2306 	XG$MrtuAnsRd$0$0 ==.
   0867 22                 2307 	ret
                           2308 ;------------------------------------------------------------
                           2309 ;Allocation info for local variables in function 'MrtuWrOne'
                           2310 ;------------------------------------------------------------
                           2311 ;fce                       Allocated with name '_MrtuWrOne_PARM_2'
                           2312 ;reg                       Allocated with name '_MrtuWrOne_PARM_3'
                           2313 ;val                       Allocated with name '_MrtuWrOne_PARM_4'
                           2314 ;bf                        Allocated with name '_MrtuWrOne_PARM_5'
                           2315 ;adr                       Allocated to registers r2 
                           2316 ;------------------------------------------------------------
                    0868   2317 	G$MrtuWrOne$0$0 ==.
                    0868   2318 	C$modbus.c$239$1$1 ==.
                           2319 ;	modbus.c:239: byte MrtuWrOne(byte adr,byte fce,word reg,word val,byte *bf)
                           2320 ;	-----------------------------------------
                           2321 ;	 function MrtuWrOne
                           2322 ;	-----------------------------------------
   0868                    2323 _MrtuWrOne:
   0868 AA 82              2324 	mov	r2,dpl
                    086A   2325 	C$modbus.c$241$1$1 ==.
                           2326 ;	modbus.c:241: *bf++=adr;
   086A AB*05              2327 	mov	r3,_MrtuWrOne_PARM_5
   086C AC*06              2328 	mov	r4,(_MrtuWrOne_PARM_5 + 1)
   086E AD*07              2329 	mov	r5,(_MrtuWrOne_PARM_5 + 2)
   0870 8B 82              2330 	mov	dpl,r3
   0872 8C 83              2331 	mov	dph,r4
   0874 8D F0              2332 	mov	b,r5
   0876 EA                 2333 	mov	a,r2
   0877 12s00r00           2334 	lcall	__gptrput
   087A 74 01              2335 	mov	a,#0x01
   087C 2B                 2336 	add	a,r3
   087D F5*05              2337 	mov	_MrtuWrOne_PARM_5,a
   087F E4                 2338 	clr	a
   0880 3C                 2339 	addc	a,r4
   0881 F5*06              2340 	mov	(_MrtuWrOne_PARM_5 + 1),a
   0883 8D*07              2341 	mov	(_MrtuWrOne_PARM_5 + 2),r5
                    0885   2342 	C$modbus.c$242$1$1 ==.
                           2343 ;	modbus.c:242: *bf++=fce;
   0885 AA*05              2344 	mov	r2,_MrtuWrOne_PARM_5
   0887 AB*06              2345 	mov	r3,(_MrtuWrOne_PARM_5 + 1)
   0889 AC*07              2346 	mov	r4,(_MrtuWrOne_PARM_5 + 2)
   088B 8A 82              2347 	mov	dpl,r2
   088D 8B 83              2348 	mov	dph,r3
   088F 8C F0              2349 	mov	b,r4
   0891 E5*00              2350 	mov	a,_MrtuWrOne_PARM_2
   0893 12s00r00           2351 	lcall	__gptrput
   0896 74 01              2352 	mov	a,#0x01
   0898 2A                 2353 	add	a,r2
   0899 F5*05              2354 	mov	_MrtuWrOne_PARM_5,a
   089B E4                 2355 	clr	a
   089C 3B                 2356 	addc	a,r3
   089D F5*06              2357 	mov	(_MrtuWrOne_PARM_5 + 1),a
   089F 8C*07              2358 	mov	(_MrtuWrOne_PARM_5 + 2),r4
                    08A1   2359 	C$modbus.c$243$1$1 ==.
                           2360 ;	modbus.c:243: *bf++=reg>>8;
   08A1 AA*05              2361 	mov	r2,_MrtuWrOne_PARM_5
   08A3 AB*06              2362 	mov	r3,(_MrtuWrOne_PARM_5 + 1)
   08A5 AC*07              2363 	mov	r4,(_MrtuWrOne_PARM_5 + 2)
   08A7 AD*02              2364 	mov	r5,(_MrtuWrOne_PARM_3 + 1)
   08A9 8A 82              2365 	mov	dpl,r2
   08AB 8B 83              2366 	mov	dph,r3
   08AD 8C F0              2367 	mov	b,r4
   08AF ED                 2368 	mov	a,r5
   08B0 12s00r00           2369 	lcall	__gptrput
   08B3 74 01              2370 	mov	a,#0x01
   08B5 2A                 2371 	add	a,r2
   08B6 F5*05              2372 	mov	_MrtuWrOne_PARM_5,a
   08B8 E4                 2373 	clr	a
   08B9 3B                 2374 	addc	a,r3
   08BA F5*06              2375 	mov	(_MrtuWrOne_PARM_5 + 1),a
   08BC 8C*07              2376 	mov	(_MrtuWrOne_PARM_5 + 2),r4
                    08BE   2377 	C$modbus.c$244$1$1 ==.
                           2378 ;	modbus.c:244: *bf++=reg;
   08BE AA*05              2379 	mov	r2,_MrtuWrOne_PARM_5
   08C0 AB*06              2380 	mov	r3,(_MrtuWrOne_PARM_5 + 1)
   08C2 AC*07              2381 	mov	r4,(_MrtuWrOne_PARM_5 + 2)
   08C4 AD*01              2382 	mov	r5,_MrtuWrOne_PARM_3
   08C6 8A 82              2383 	mov	dpl,r2
   08C8 8B 83              2384 	mov	dph,r3
   08CA 8C F0              2385 	mov	b,r4
   08CC ED                 2386 	mov	a,r5
   08CD 12s00r00           2387 	lcall	__gptrput
   08D0 74 01              2388 	mov	a,#0x01
   08D2 2A                 2389 	add	a,r2
   08D3 F5*05              2390 	mov	_MrtuWrOne_PARM_5,a
   08D5 E4                 2391 	clr	a
   08D6 3B                 2392 	addc	a,r3
   08D7 F5*06              2393 	mov	(_MrtuWrOne_PARM_5 + 1),a
   08D9 8C*07              2394 	mov	(_MrtuWrOne_PARM_5 + 2),r4
                    08DB   2395 	C$modbus.c$245$1$1 ==.
                           2396 ;	modbus.c:245: *bf++=val>>8;
   08DB AA*05              2397 	mov	r2,_MrtuWrOne_PARM_5
   08DD AB*06              2398 	mov	r3,(_MrtuWrOne_PARM_5 + 1)
   08DF AC*07              2399 	mov	r4,(_MrtuWrOne_PARM_5 + 2)
   08E1 AD*04              2400 	mov	r5,(_MrtuWrOne_PARM_4 + 1)
   08E3 8A 82              2401 	mov	dpl,r2
   08E5 8B 83              2402 	mov	dph,r3
   08E7 8C F0              2403 	mov	b,r4
   08E9 ED                 2404 	mov	a,r5
   08EA 12s00r00           2405 	lcall	__gptrput
   08ED 74 01              2406 	mov	a,#0x01
   08EF 2A                 2407 	add	a,r2
   08F0 F5*05              2408 	mov	_MrtuWrOne_PARM_5,a
   08F2 E4                 2409 	clr	a
   08F3 3B                 2410 	addc	a,r3
   08F4 F5*06              2411 	mov	(_MrtuWrOne_PARM_5 + 1),a
   08F6 8C*07              2412 	mov	(_MrtuWrOne_PARM_5 + 2),r4
                    08F8   2413 	C$modbus.c$246$1$1 ==.
                           2414 ;	modbus.c:246: *bf++=val;
   08F8 AA*05              2415 	mov	r2,_MrtuWrOne_PARM_5
   08FA AB*06              2416 	mov	r3,(_MrtuWrOne_PARM_5 + 1)
   08FC AC*07              2417 	mov	r4,(_MrtuWrOne_PARM_5 + 2)
   08FE AD*03              2418 	mov	r5,_MrtuWrOne_PARM_4
   0900 8A 82              2419 	mov	dpl,r2
   0902 8B 83              2420 	mov	dph,r3
   0904 8C F0              2421 	mov	b,r4
   0906 ED                 2422 	mov	a,r5
   0907 12s00r00           2423 	lcall	__gptrput
                    090A   2424 	C$modbus.c$247$1$1 ==.
                           2425 ;	modbus.c:247: return 6;
   090A 75 82 06           2426 	mov	dpl,#0x06
                    090D   2427 	C$modbus.c$248$1$1 ==.
                    090D   2428 	XG$MrtuWrOne$0$0 ==.
   090D 22                 2429 	ret
                           2430 ;------------------------------------------------------------
                           2431 ;Allocation info for local variables in function 'MrtuRd'
                           2432 ;------------------------------------------------------------
                           2433 ;fce                       Allocated with name '_MrtuRd_PARM_2'
                           2434 ;reg                       Allocated with name '_MrtuRd_PARM_3'
                           2435 ;nbr                       Allocated with name '_MrtuRd_PARM_4'
                           2436 ;bf                        Allocated with name '_MrtuRd_PARM_5'
                           2437 ;adr                       Allocated to registers r2 
                           2438 ;------------------------------------------------------------
                    090E   2439 	G$MrtuRd$0$0 ==.
                    090E   2440 	C$modbus.c$250$1$1 ==.
                           2441 ;	modbus.c:250: byte MrtuRd(byte adr,byte fce,word reg,word nbr,byte *bf)
                           2442 ;	-----------------------------------------
                           2443 ;	 function MrtuRd
                           2444 ;	-----------------------------------------
   090E                    2445 _MrtuRd:
   090E AA 82              2446 	mov	r2,dpl
                    0910   2447 	C$modbus.c$252$1$1 ==.
                           2448 ;	modbus.c:252: *bf++=adr;
   0910 AB*05              2449 	mov	r3,_MrtuRd_PARM_5
   0912 AC*06              2450 	mov	r4,(_MrtuRd_PARM_5 + 1)
   0914 AD*07              2451 	mov	r5,(_MrtuRd_PARM_5 + 2)
   0916 8B 82              2452 	mov	dpl,r3
   0918 8C 83              2453 	mov	dph,r4
   091A 8D F0              2454 	mov	b,r5
   091C EA                 2455 	mov	a,r2
   091D 12s00r00           2456 	lcall	__gptrput
   0920 74 01              2457 	mov	a,#0x01
   0922 2B                 2458 	add	a,r3
   0923 F5*05              2459 	mov	_MrtuRd_PARM_5,a
   0925 E4                 2460 	clr	a
   0926 3C                 2461 	addc	a,r4
   0927 F5*06              2462 	mov	(_MrtuRd_PARM_5 + 1),a
   0929 8D*07              2463 	mov	(_MrtuRd_PARM_5 + 2),r5
                    092B   2464 	C$modbus.c$253$1$1 ==.
                           2465 ;	modbus.c:253: *bf++=fce;
   092B AA*05              2466 	mov	r2,_MrtuRd_PARM_5
   092D AB*06              2467 	mov	r3,(_MrtuRd_PARM_5 + 1)
   092F AC*07              2468 	mov	r4,(_MrtuRd_PARM_5 + 2)
   0931 8A 82              2469 	mov	dpl,r2
   0933 8B 83              2470 	mov	dph,r3
   0935 8C F0              2471 	mov	b,r4
   0937 E5*00              2472 	mov	a,_MrtuRd_PARM_2
   0939 12s00r00           2473 	lcall	__gptrput
   093C 74 01              2474 	mov	a,#0x01
   093E 2A                 2475 	add	a,r2
   093F F5*05              2476 	mov	_MrtuRd_PARM_5,a
   0941 E4                 2477 	clr	a
   0942 3B                 2478 	addc	a,r3
   0943 F5*06              2479 	mov	(_MrtuRd_PARM_5 + 1),a
   0945 8C*07              2480 	mov	(_MrtuRd_PARM_5 + 2),r4
                    0947   2481 	C$modbus.c$254$1$1 ==.
                           2482 ;	modbus.c:254: *bf++=reg>>8;
   0947 AA*05              2483 	mov	r2,_MrtuRd_PARM_5
   0949 AB*06              2484 	mov	r3,(_MrtuRd_PARM_5 + 1)
   094B AC*07              2485 	mov	r4,(_MrtuRd_PARM_5 + 2)
   094D AD*02              2486 	mov	r5,(_MrtuRd_PARM_3 + 1)
   094F 8A 82              2487 	mov	dpl,r2
   0951 8B 83              2488 	mov	dph,r3
   0953 8C F0              2489 	mov	b,r4
   0955 ED                 2490 	mov	a,r5
   0956 12s00r00           2491 	lcall	__gptrput
   0959 74 01              2492 	mov	a,#0x01
   095B 2A                 2493 	add	a,r2
   095C F5*05              2494 	mov	_MrtuRd_PARM_5,a
   095E E4                 2495 	clr	a
   095F 3B                 2496 	addc	a,r3
   0960 F5*06              2497 	mov	(_MrtuRd_PARM_5 + 1),a
   0962 8C*07              2498 	mov	(_MrtuRd_PARM_5 + 2),r4
                    0964   2499 	C$modbus.c$255$1$1 ==.
                           2500 ;	modbus.c:255: *bf++=reg;
   0964 AA*05              2501 	mov	r2,_MrtuRd_PARM_5
   0966 AB*06              2502 	mov	r3,(_MrtuRd_PARM_5 + 1)
   0968 AC*07              2503 	mov	r4,(_MrtuRd_PARM_5 + 2)
   096A AD*01              2504 	mov	r5,_MrtuRd_PARM_3
   096C 8A 82              2505 	mov	dpl,r2
   096E 8B 83              2506 	mov	dph,r3
   0970 8C F0              2507 	mov	b,r4
   0972 ED                 2508 	mov	a,r5
   0973 12s00r00           2509 	lcall	__gptrput
   0976 74 01              2510 	mov	a,#0x01
   0978 2A                 2511 	add	a,r2
   0979 F5*05              2512 	mov	_MrtuRd_PARM_5,a
   097B E4                 2513 	clr	a
   097C 3B                 2514 	addc	a,r3
   097D F5*06              2515 	mov	(_MrtuRd_PARM_5 + 1),a
   097F 8C*07              2516 	mov	(_MrtuRd_PARM_5 + 2),r4
                    0981   2517 	C$modbus.c$256$1$1 ==.
                           2518 ;	modbus.c:256: *bf++=nbr>>8;
   0981 AA*05              2519 	mov	r2,_MrtuRd_PARM_5
   0983 AB*06              2520 	mov	r3,(_MrtuRd_PARM_5 + 1)
   0985 AC*07              2521 	mov	r4,(_MrtuRd_PARM_5 + 2)
   0987 AD*04              2522 	mov	r5,(_MrtuRd_PARM_4 + 1)
   0989 8A 82              2523 	mov	dpl,r2
   098B 8B 83              2524 	mov	dph,r3
   098D 8C F0              2525 	mov	b,r4
   098F ED                 2526 	mov	a,r5
   0990 12s00r00           2527 	lcall	__gptrput
   0993 74 01              2528 	mov	a,#0x01
   0995 2A                 2529 	add	a,r2
   0996 F5*05              2530 	mov	_MrtuRd_PARM_5,a
   0998 E4                 2531 	clr	a
   0999 3B                 2532 	addc	a,r3
   099A F5*06              2533 	mov	(_MrtuRd_PARM_5 + 1),a
   099C 8C*07              2534 	mov	(_MrtuRd_PARM_5 + 2),r4
                    099E   2535 	C$modbus.c$257$1$1 ==.
                           2536 ;	modbus.c:257: *bf++=nbr;
   099E AA*05              2537 	mov	r2,_MrtuRd_PARM_5
   09A0 AB*06              2538 	mov	r3,(_MrtuRd_PARM_5 + 1)
   09A2 AC*07              2539 	mov	r4,(_MrtuRd_PARM_5 + 2)
   09A4 AD*03              2540 	mov	r5,_MrtuRd_PARM_4
   09A6 8A 82              2541 	mov	dpl,r2
   09A8 8B 83              2542 	mov	dph,r3
   09AA 8C F0              2543 	mov	b,r4
   09AC ED                 2544 	mov	a,r5
   09AD 12s00r00           2545 	lcall	__gptrput
                    09B0   2546 	C$modbus.c$258$1$1 ==.
                           2547 ;	modbus.c:258: return 6;
   09B0 75 82 06           2548 	mov	dpl,#0x06
                    09B3   2549 	C$modbus.c$259$1$1 ==.
                    09B3   2550 	XG$MrtuRd$0$0 ==.
   09B3 22                 2551 	ret
                           2552 ;------------------------------------------------------------
                           2553 ;Allocation info for local variables in function 'MrtuWr'
                           2554 ;------------------------------------------------------------
                           2555 ;fce                       Allocated with name '_MrtuWr_PARM_2'
                           2556 ;reg                       Allocated with name '_MrtuWr_PARM_3'
                           2557 ;nbr                       Allocated with name '_MrtuWr_PARM_4'
                           2558 ;vals                      Allocated with name '_MrtuWr_PARM_5'
                           2559 ;bf                        Allocated with name '_MrtuWr_PARM_6'
                           2560 ;adr                       Allocated to registers r2 
                           2561 ;n                         Allocated to registers r1 
                           2562 ;bytes                     Allocated with name '_MrtuWr_bytes_1_1'
                           2563 ;------------------------------------------------------------
                    09B4   2564 	G$MrtuWr$0$0 ==.
                    09B4   2565 	C$modbus.c$261$1$1 ==.
                           2566 ;	modbus.c:261: byte MrtuWr(byte adr,byte fce,word reg,word nbr,byte *vals,byte *bf)
                           2567 ;	-----------------------------------------
                           2568 ;	 function MrtuWr
                           2569 ;	-----------------------------------------
   09B4                    2570 _MrtuWr:
   09B4 AA 82              2571 	mov	r2,dpl
                    09B6   2572 	C$modbus.c$265$1$1 ==.
                           2573 ;	modbus.c:265: *bf++=adr;
   09B6 AB*08              2574 	mov	r3,_MrtuWr_PARM_6
   09B8 AC*09              2575 	mov	r4,(_MrtuWr_PARM_6 + 1)
   09BA AD*0A              2576 	mov	r5,(_MrtuWr_PARM_6 + 2)
   09BC 8B 82              2577 	mov	dpl,r3
   09BE 8C 83              2578 	mov	dph,r4
   09C0 8D F0              2579 	mov	b,r5
   09C2 EA                 2580 	mov	a,r2
   09C3 12s00r00           2581 	lcall	__gptrput
   09C6 74 01              2582 	mov	a,#0x01
   09C8 2B                 2583 	add	a,r3
   09C9 F5*08              2584 	mov	_MrtuWr_PARM_6,a
   09CB E4                 2585 	clr	a
   09CC 3C                 2586 	addc	a,r4
   09CD F5*09              2587 	mov	(_MrtuWr_PARM_6 + 1),a
   09CF 8D*0A              2588 	mov	(_MrtuWr_PARM_6 + 2),r5
                    09D1   2589 	C$modbus.c$266$1$1 ==.
                           2590 ;	modbus.c:266: *bf++=fce;
   09D1 AA*08              2591 	mov	r2,_MrtuWr_PARM_6
   09D3 AB*09              2592 	mov	r3,(_MrtuWr_PARM_6 + 1)
   09D5 AC*0A              2593 	mov	r4,(_MrtuWr_PARM_6 + 2)
   09D7 8A 82              2594 	mov	dpl,r2
   09D9 8B 83              2595 	mov	dph,r3
   09DB 8C F0              2596 	mov	b,r4
   09DD E5*00              2597 	mov	a,_MrtuWr_PARM_2
   09DF 12s00r00           2598 	lcall	__gptrput
   09E2 74 01              2599 	mov	a,#0x01
   09E4 2A                 2600 	add	a,r2
   09E5 F5*08              2601 	mov	_MrtuWr_PARM_6,a
   09E7 E4                 2602 	clr	a
   09E8 3B                 2603 	addc	a,r3
   09E9 F5*09              2604 	mov	(_MrtuWr_PARM_6 + 1),a
   09EB 8C*0A              2605 	mov	(_MrtuWr_PARM_6 + 2),r4
                    09ED   2606 	C$modbus.c$267$1$1 ==.
                           2607 ;	modbus.c:267: *bf++=reg>>8;
   09ED AA*08              2608 	mov	r2,_MrtuWr_PARM_6
   09EF AB*09              2609 	mov	r3,(_MrtuWr_PARM_6 + 1)
   09F1 AC*0A              2610 	mov	r4,(_MrtuWr_PARM_6 + 2)
   09F3 AD*02              2611 	mov	r5,(_MrtuWr_PARM_3 + 1)
   09F5 8A 82              2612 	mov	dpl,r2
   09F7 8B 83              2613 	mov	dph,r3
   09F9 8C F0              2614 	mov	b,r4
   09FB ED                 2615 	mov	a,r5
   09FC 12s00r00           2616 	lcall	__gptrput
   09FF 74 01              2617 	mov	a,#0x01
   0A01 2A                 2618 	add	a,r2
   0A02 F5*08              2619 	mov	_MrtuWr_PARM_6,a
   0A04 E4                 2620 	clr	a
   0A05 3B                 2621 	addc	a,r3
   0A06 F5*09              2622 	mov	(_MrtuWr_PARM_6 + 1),a
   0A08 8C*0A              2623 	mov	(_MrtuWr_PARM_6 + 2),r4
                    0A0A   2624 	C$modbus.c$268$1$1 ==.
                           2625 ;	modbus.c:268: *bf++=reg;
   0A0A AA*08              2626 	mov	r2,_MrtuWr_PARM_6
   0A0C AB*09              2627 	mov	r3,(_MrtuWr_PARM_6 + 1)
   0A0E AC*0A              2628 	mov	r4,(_MrtuWr_PARM_6 + 2)
   0A10 AD*01              2629 	mov	r5,_MrtuWr_PARM_3
   0A12 8A 82              2630 	mov	dpl,r2
   0A14 8B 83              2631 	mov	dph,r3
   0A16 8C F0              2632 	mov	b,r4
   0A18 ED                 2633 	mov	a,r5
   0A19 12s00r00           2634 	lcall	__gptrput
   0A1C 74 01              2635 	mov	a,#0x01
   0A1E 2A                 2636 	add	a,r2
   0A1F F5*08              2637 	mov	_MrtuWr_PARM_6,a
   0A21 E4                 2638 	clr	a
   0A22 3B                 2639 	addc	a,r3
   0A23 F5*09              2640 	mov	(_MrtuWr_PARM_6 + 1),a
   0A25 8C*0A              2641 	mov	(_MrtuWr_PARM_6 + 2),r4
                    0A27   2642 	C$modbus.c$269$1$1 ==.
                           2643 ;	modbus.c:269: *bf++=nbr>>8;
   0A27 AA*08              2644 	mov	r2,_MrtuWr_PARM_6
   0A29 AB*09              2645 	mov	r3,(_MrtuWr_PARM_6 + 1)
   0A2B AC*0A              2646 	mov	r4,(_MrtuWr_PARM_6 + 2)
   0A2D AD*04              2647 	mov	r5,(_MrtuWr_PARM_4 + 1)
   0A2F 8A 82              2648 	mov	dpl,r2
   0A31 8B 83              2649 	mov	dph,r3
   0A33 8C F0              2650 	mov	b,r4
   0A35 ED                 2651 	mov	a,r5
   0A36 12s00r00           2652 	lcall	__gptrput
   0A39 74 01              2653 	mov	a,#0x01
   0A3B 2A                 2654 	add	a,r2
   0A3C F5*08              2655 	mov	_MrtuWr_PARM_6,a
   0A3E E4                 2656 	clr	a
   0A3F 3B                 2657 	addc	a,r3
   0A40 F5*09              2658 	mov	(_MrtuWr_PARM_6 + 1),a
   0A42 8C*0A              2659 	mov	(_MrtuWr_PARM_6 + 2),r4
                    0A44   2660 	C$modbus.c$270$1$1 ==.
                           2661 ;	modbus.c:270: *bf++=nbr;
   0A44 AA*08              2662 	mov	r2,_MrtuWr_PARM_6
   0A46 AB*09              2663 	mov	r3,(_MrtuWr_PARM_6 + 1)
   0A48 AC*0A              2664 	mov	r4,(_MrtuWr_PARM_6 + 2)
   0A4A AD*03              2665 	mov	r5,_MrtuWr_PARM_4
   0A4C 8A 82              2666 	mov	dpl,r2
   0A4E 8B 83              2667 	mov	dph,r3
   0A50 8C F0              2668 	mov	b,r4
   0A52 ED                 2669 	mov	a,r5
   0A53 12s00r00           2670 	lcall	__gptrput
   0A56 74 01              2671 	mov	a,#0x01
   0A58 2A                 2672 	add	a,r2
   0A59 F5*08              2673 	mov	_MrtuWr_PARM_6,a
   0A5B E4                 2674 	clr	a
   0A5C 3B                 2675 	addc	a,r3
   0A5D F5*09              2676 	mov	(_MrtuWr_PARM_6 + 1),a
   0A5F 8C*0A              2677 	mov	(_MrtuWr_PARM_6 + 2),r4
                    0A61   2678 	C$modbus.c$271$1$1 ==.
                           2679 ;	modbus.c:271: switch(fce)
   0A61 74 0F              2680 	mov	a,#0x0F
   0A63 B5*00 02           2681 	cjne	a,_MrtuWr_PARM_2,00115$
   0A66 80 0B              2682 	sjmp	00102$
   0A68                    2683 00115$:
   0A68 74 10              2684 	mov	a,#0x10
   0A6A B5*00 21           2685 	cjne	a,_MrtuWr_PARM_2,00103$
                    0A6D   2686 	C$modbus.c$273$2$2 ==.
                           2687 ;	modbus.c:273: case 16: bytes=2*nbr;break;
   0A6D ED                 2688 	mov	a,r5
   0A6E 2D                 2689 	add	a,r5
   0A6F F5*0B              2690 	mov	_MrtuWr_bytes_1_1,a
                    0A71   2691 	C$modbus.c$274$2$2 ==.
                           2692 ;	modbus.c:274: case 15: bytes= (nbr+7)/8;break;
   0A71 80 1E              2693 	sjmp	00104$
   0A73                    2694 00102$:
   0A73 74 07              2695 	mov	a,#0x07
   0A75 25*03              2696 	add	a,_MrtuWr_PARM_4
   0A77 FB                 2697 	mov	r3,a
   0A78 E4                 2698 	clr	a
   0A79 35*04              2699 	addc	a,(_MrtuWr_PARM_4 + 1)
   0A7B C4                 2700 	swap	a
   0A7C 23                 2701 	rl	a
   0A7D CB                 2702 	xch	a,r3
   0A7E C4                 2703 	swap	a
   0A7F 23                 2704 	rl	a
   0A80 54 1F              2705 	anl	a,#0x1f
   0A82 6B                 2706 	xrl	a,r3
   0A83 CB                 2707 	xch	a,r3
   0A84 54 1F              2708 	anl	a,#0x1f
   0A86 CB                 2709 	xch	a,r3
   0A87 6B                 2710 	xrl	a,r3
   0A88 CB                 2711 	xch	a,r3
   0A89 FC                 2712 	mov	r4,a
   0A8A 8B*0B              2713 	mov	_MrtuWr_bytes_1_1,r3
                    0A8C   2714 	C$modbus.c$275$2$2 ==.
                           2715 ;	modbus.c:275: default: bytes=0;
   0A8C 80 03              2716 	sjmp	00104$
   0A8E                    2717 00103$:
   0A8E 75*0B 00           2718 	mov	_MrtuWr_bytes_1_1,#0x00
                    0A91   2719 	C$modbus.c$276$1$1 ==.
                           2720 ;	modbus.c:276: }
   0A91                    2721 00104$:
                    0A91   2722 	C$modbus.c$277$1$1 ==.
                           2723 ;	modbus.c:277: *bf++=n=bytes;
   0A91 AB*08              2724 	mov	r3,_MrtuWr_PARM_6
   0A93 AC*09              2725 	mov	r4,(_MrtuWr_PARM_6 + 1)
   0A95 AD*0A              2726 	mov	r5,(_MrtuWr_PARM_6 + 2)
   0A97 8B 82              2727 	mov	dpl,r3
   0A99 8C 83              2728 	mov	dph,r4
   0A9B 8D F0              2729 	mov	b,r5
   0A9D E5*0B              2730 	mov	a,_MrtuWr_bytes_1_1
   0A9F 12s00r00           2731 	lcall	__gptrput
   0AA2 74 01              2732 	mov	a,#0x01
   0AA4 2B                 2733 	add	a,r3
   0AA5 F5*08              2734 	mov	_MrtuWr_PARM_6,a
   0AA7 E4                 2735 	clr	a
   0AA8 3C                 2736 	addc	a,r4
   0AA9 F5*09              2737 	mov	(_MrtuWr_PARM_6 + 1),a
   0AAB 8D*0A              2738 	mov	(_MrtuWr_PARM_6 + 2),r5
                    0AAD   2739 	C$modbus.c$278$1$1 ==.
                           2740 ;	modbus.c:278: while(n--) *bf++= *vals++;
   0AAD AB*05              2741 	mov	r3,_MrtuWr_PARM_5
   0AAF AC*06              2742 	mov	r4,(_MrtuWr_PARM_5 + 1)
   0AB1 AD*07              2743 	mov	r5,(_MrtuWr_PARM_5 + 2)
   0AB3 AE*08              2744 	mov	r6,_MrtuWr_PARM_6
   0AB5 AF*09              2745 	mov	r7,(_MrtuWr_PARM_6 + 1)
   0AB7 A8*0A              2746 	mov	r0,(_MrtuWr_PARM_6 + 2)
   0AB9 A9*0B              2747 	mov	r1,_MrtuWr_bytes_1_1
   0ABB                    2748 00105$:
   0ABB 89 02              2749 	mov	ar2,r1
   0ABD 19                 2750 	dec	r1
   0ABE EA                 2751 	mov	a,r2
   0ABF 60 20              2752 	jz	00107$
   0AC1 8B 82              2753 	mov	dpl,r3
   0AC3 8C 83              2754 	mov	dph,r4
   0AC5 8D F0              2755 	mov	b,r5
   0AC7 12s00r00           2756 	lcall	__gptrget
   0ACA FA                 2757 	mov	r2,a
   0ACB A3                 2758 	inc	dptr
   0ACC AB 82              2759 	mov	r3,dpl
   0ACE AC 83              2760 	mov	r4,dph
   0AD0 8E 82              2761 	mov	dpl,r6
   0AD2 8F 83              2762 	mov	dph,r7
   0AD4 88 F0              2763 	mov	b,r0
   0AD6 EA                 2764 	mov	a,r2
   0AD7 12s00r00           2765 	lcall	__gptrput
   0ADA A3                 2766 	inc	dptr
   0ADB AE 82              2767 	mov	r6,dpl
   0ADD AF 83              2768 	mov	r7,dph
   0ADF 80 DA              2769 	sjmp	00105$
   0AE1                    2770 00107$:
                    0AE1   2771 	C$modbus.c$279$1$1 ==.
                           2772 ;	modbus.c:279: return bytes+7;
   0AE1 74 07              2773 	mov	a,#0x07
   0AE3 25*0B              2774 	add	a,_MrtuWr_bytes_1_1
   0AE5 F5 82              2775 	mov	dpl,a
                    0AE7   2776 	C$modbus.c$280$1$1 ==.
                    0AE7   2777 	XG$MrtuWr$0$0 ==.
   0AE7 22                 2778 	ret
                           2779 	.area CSEG    (CODE)
                           2780 	.area CONST   (CODE)
                    0000   2781 G$tabCRCHi$0$0 == .
   0000                    2782 _tabCRCHi:
   0000 00                 2783 	.db #0x00	; 0
   0001 C1                 2784 	.db #0xC1	; 193
   0002 81                 2785 	.db #0x81	; 129
   0003 40                 2786 	.db #0x40	; 64
   0004 01                 2787 	.db #0x01	; 1
   0005 C0                 2788 	.db #0xC0	; 192
   0006 80                 2789 	.db #0x80	; 128
   0007 41                 2790 	.db #0x41	; 65	A
   0008 01                 2791 	.db #0x01	; 1
   0009 C0                 2792 	.db #0xC0	; 192
   000A 80                 2793 	.db #0x80	; 128
   000B 41                 2794 	.db #0x41	; 65	A
   000C 00                 2795 	.db #0x00	; 0
   000D C1                 2796 	.db #0xC1	; 193
   000E 81                 2797 	.db #0x81	; 129
   000F 40                 2798 	.db #0x40	; 64
   0010 01                 2799 	.db #0x01	; 1
   0011 C0                 2800 	.db #0xC0	; 192
   0012 80                 2801 	.db #0x80	; 128
   0013 41                 2802 	.db #0x41	; 65	A
   0014 00                 2803 	.db #0x00	; 0
   0015 C1                 2804 	.db #0xC1	; 193
   0016 81                 2805 	.db #0x81	; 129
   0017 40                 2806 	.db #0x40	; 64
   0018 00                 2807 	.db #0x00	; 0
   0019 C1                 2808 	.db #0xC1	; 193
   001A 81                 2809 	.db #0x81	; 129
   001B 40                 2810 	.db #0x40	; 64
   001C 01                 2811 	.db #0x01	; 1
   001D C0                 2812 	.db #0xC0	; 192
   001E 80                 2813 	.db #0x80	; 128
   001F 41                 2814 	.db #0x41	; 65	A
   0020 01                 2815 	.db #0x01	; 1
   0021 C0                 2816 	.db #0xC0	; 192
   0022 80                 2817 	.db #0x80	; 128
   0023 41                 2818 	.db #0x41	; 65	A
   0024 00                 2819 	.db #0x00	; 0
   0025 C1                 2820 	.db #0xC1	; 193
   0026 81                 2821 	.db #0x81	; 129
   0027 40                 2822 	.db #0x40	; 64
   0028 00                 2823 	.db #0x00	; 0
   0029 C1                 2824 	.db #0xC1	; 193
   002A 81                 2825 	.db #0x81	; 129
   002B 40                 2826 	.db #0x40	; 64
   002C 01                 2827 	.db #0x01	; 1
   002D C0                 2828 	.db #0xC0	; 192
   002E 80                 2829 	.db #0x80	; 128
   002F 41                 2830 	.db #0x41	; 65	A
   0030 00                 2831 	.db #0x00	; 0
   0031 C1                 2832 	.db #0xC1	; 193
   0032 81                 2833 	.db #0x81	; 129
   0033 40                 2834 	.db #0x40	; 64
   0034 01                 2835 	.db #0x01	; 1
   0035 C0                 2836 	.db #0xC0	; 192
   0036 80                 2837 	.db #0x80	; 128
   0037 41                 2838 	.db #0x41	; 65	A
   0038 01                 2839 	.db #0x01	; 1
   0039 C0                 2840 	.db #0xC0	; 192
   003A 80                 2841 	.db #0x80	; 128
   003B 41                 2842 	.db #0x41	; 65	A
   003C 00                 2843 	.db #0x00	; 0
   003D C1                 2844 	.db #0xC1	; 193
   003E 81                 2845 	.db #0x81	; 129
   003F 40                 2846 	.db #0x40	; 64
   0040 01                 2847 	.db #0x01	; 1
   0041 C0                 2848 	.db #0xC0	; 192
   0042 80                 2849 	.db #0x80	; 128
   0043 41                 2850 	.db #0x41	; 65	A
   0044 00                 2851 	.db #0x00	; 0
   0045 C1                 2852 	.db #0xC1	; 193
   0046 81                 2853 	.db #0x81	; 129
   0047 40                 2854 	.db #0x40	; 64
   0048 00                 2855 	.db #0x00	; 0
   0049 C1                 2856 	.db #0xC1	; 193
   004A 81                 2857 	.db #0x81	; 129
   004B 40                 2858 	.db #0x40	; 64
   004C 01                 2859 	.db #0x01	; 1
   004D C0                 2860 	.db #0xC0	; 192
   004E 80                 2861 	.db #0x80	; 128
   004F 41                 2862 	.db #0x41	; 65	A
   0050 00                 2863 	.db #0x00	; 0
   0051 C1                 2864 	.db #0xC1	; 193
   0052 81                 2865 	.db #0x81	; 129
   0053 40                 2866 	.db #0x40	; 64
   0054 01                 2867 	.db #0x01	; 1
   0055 C0                 2868 	.db #0xC0	; 192
   0056 80                 2869 	.db #0x80	; 128
   0057 41                 2870 	.db #0x41	; 65	A
   0058 01                 2871 	.db #0x01	; 1
   0059 C0                 2872 	.db #0xC0	; 192
   005A 80                 2873 	.db #0x80	; 128
   005B 41                 2874 	.db #0x41	; 65	A
   005C 00                 2875 	.db #0x00	; 0
   005D C1                 2876 	.db #0xC1	; 193
   005E 81                 2877 	.db #0x81	; 129
   005F 40                 2878 	.db #0x40	; 64
   0060 00                 2879 	.db #0x00	; 0
   0061 C1                 2880 	.db #0xC1	; 193
   0062 81                 2881 	.db #0x81	; 129
   0063 40                 2882 	.db #0x40	; 64
   0064 01                 2883 	.db #0x01	; 1
   0065 C0                 2884 	.db #0xC0	; 192
   0066 80                 2885 	.db #0x80	; 128
   0067 41                 2886 	.db #0x41	; 65	A
   0068 01                 2887 	.db #0x01	; 1
   0069 C0                 2888 	.db #0xC0	; 192
   006A 80                 2889 	.db #0x80	; 128
   006B 41                 2890 	.db #0x41	; 65	A
   006C 00                 2891 	.db #0x00	; 0
   006D C1                 2892 	.db #0xC1	; 193
   006E 81                 2893 	.db #0x81	; 129
   006F 40                 2894 	.db #0x40	; 64
   0070 01                 2895 	.db #0x01	; 1
   0071 C0                 2896 	.db #0xC0	; 192
   0072 80                 2897 	.db #0x80	; 128
   0073 41                 2898 	.db #0x41	; 65	A
   0074 00                 2899 	.db #0x00	; 0
   0075 C1                 2900 	.db #0xC1	; 193
   0076 81                 2901 	.db #0x81	; 129
   0077 40                 2902 	.db #0x40	; 64
   0078 00                 2903 	.db #0x00	; 0
   0079 C1                 2904 	.db #0xC1	; 193
   007A 81                 2905 	.db #0x81	; 129
   007B 40                 2906 	.db #0x40	; 64
   007C 01                 2907 	.db #0x01	; 1
   007D C0                 2908 	.db #0xC0	; 192
   007E 80                 2909 	.db #0x80	; 128
   007F 41                 2910 	.db #0x41	; 65	A
   0080 01                 2911 	.db #0x01	; 1
   0081 C0                 2912 	.db #0xC0	; 192
   0082 80                 2913 	.db #0x80	; 128
   0083 41                 2914 	.db #0x41	; 65	A
   0084 00                 2915 	.db #0x00	; 0
   0085 C1                 2916 	.db #0xC1	; 193
   0086 81                 2917 	.db #0x81	; 129
   0087 40                 2918 	.db #0x40	; 64
   0088 00                 2919 	.db #0x00	; 0
   0089 C1                 2920 	.db #0xC1	; 193
   008A 81                 2921 	.db #0x81	; 129
   008B 40                 2922 	.db #0x40	; 64
   008C 01                 2923 	.db #0x01	; 1
   008D C0                 2924 	.db #0xC0	; 192
   008E 80                 2925 	.db #0x80	; 128
   008F 41                 2926 	.db #0x41	; 65	A
   0090 00                 2927 	.db #0x00	; 0
   0091 C1                 2928 	.db #0xC1	; 193
   0092 81                 2929 	.db #0x81	; 129
   0093 40                 2930 	.db #0x40	; 64
   0094 01                 2931 	.db #0x01	; 1
   0095 C0                 2932 	.db #0xC0	; 192
   0096 80                 2933 	.db #0x80	; 128
   0097 41                 2934 	.db #0x41	; 65	A
   0098 01                 2935 	.db #0x01	; 1
   0099 C0                 2936 	.db #0xC0	; 192
   009A 80                 2937 	.db #0x80	; 128
   009B 41                 2938 	.db #0x41	; 65	A
   009C 00                 2939 	.db #0x00	; 0
   009D C1                 2940 	.db #0xC1	; 193
   009E 81                 2941 	.db #0x81	; 129
   009F 40                 2942 	.db #0x40	; 64
   00A0 00                 2943 	.db #0x00	; 0
   00A1 C1                 2944 	.db #0xC1	; 193
   00A2 81                 2945 	.db #0x81	; 129
   00A3 40                 2946 	.db #0x40	; 64
   00A4 01                 2947 	.db #0x01	; 1
   00A5 C0                 2948 	.db #0xC0	; 192
   00A6 80                 2949 	.db #0x80	; 128
   00A7 41                 2950 	.db #0x41	; 65	A
   00A8 01                 2951 	.db #0x01	; 1
   00A9 C0                 2952 	.db #0xC0	; 192
   00AA 80                 2953 	.db #0x80	; 128
   00AB 41                 2954 	.db #0x41	; 65	A
   00AC 00                 2955 	.db #0x00	; 0
   00AD C1                 2956 	.db #0xC1	; 193
   00AE 81                 2957 	.db #0x81	; 129
   00AF 40                 2958 	.db #0x40	; 64
   00B0 01                 2959 	.db #0x01	; 1
   00B1 C0                 2960 	.db #0xC0	; 192
   00B2 80                 2961 	.db #0x80	; 128
   00B3 41                 2962 	.db #0x41	; 65	A
   00B4 00                 2963 	.db #0x00	; 0
   00B5 C1                 2964 	.db #0xC1	; 193
   00B6 81                 2965 	.db #0x81	; 129
   00B7 40                 2966 	.db #0x40	; 64
   00B8 00                 2967 	.db #0x00	; 0
   00B9 C1                 2968 	.db #0xC1	; 193
   00BA 81                 2969 	.db #0x81	; 129
   00BB 40                 2970 	.db #0x40	; 64
   00BC 01                 2971 	.db #0x01	; 1
   00BD C0                 2972 	.db #0xC0	; 192
   00BE 80                 2973 	.db #0x80	; 128
   00BF 41                 2974 	.db #0x41	; 65	A
   00C0 00                 2975 	.db #0x00	; 0
   00C1 C1                 2976 	.db #0xC1	; 193
   00C2 81                 2977 	.db #0x81	; 129
   00C3 40                 2978 	.db #0x40	; 64
   00C4 01                 2979 	.db #0x01	; 1
   00C5 C0                 2980 	.db #0xC0	; 192
   00C6 80                 2981 	.db #0x80	; 128
   00C7 41                 2982 	.db #0x41	; 65	A
   00C8 01                 2983 	.db #0x01	; 1
   00C9 C0                 2984 	.db #0xC0	; 192
   00CA 80                 2985 	.db #0x80	; 128
   00CB 41                 2986 	.db #0x41	; 65	A
   00CC 00                 2987 	.db #0x00	; 0
   00CD C1                 2988 	.db #0xC1	; 193
   00CE 81                 2989 	.db #0x81	; 129
   00CF 40                 2990 	.db #0x40	; 64
   00D0 01                 2991 	.db #0x01	; 1
   00D1 C0                 2992 	.db #0xC0	; 192
   00D2 80                 2993 	.db #0x80	; 128
   00D3 41                 2994 	.db #0x41	; 65	A
   00D4 00                 2995 	.db #0x00	; 0
   00D5 C1                 2996 	.db #0xC1	; 193
   00D6 81                 2997 	.db #0x81	; 129
   00D7 40                 2998 	.db #0x40	; 64
   00D8 00                 2999 	.db #0x00	; 0
   00D9 C1                 3000 	.db #0xC1	; 193
   00DA 81                 3001 	.db #0x81	; 129
   00DB 40                 3002 	.db #0x40	; 64
   00DC 01                 3003 	.db #0x01	; 1
   00DD C0                 3004 	.db #0xC0	; 192
   00DE 80                 3005 	.db #0x80	; 128
   00DF 41                 3006 	.db #0x41	; 65	A
   00E0 01                 3007 	.db #0x01	; 1
   00E1 C0                 3008 	.db #0xC0	; 192
   00E2 80                 3009 	.db #0x80	; 128
   00E3 41                 3010 	.db #0x41	; 65	A
   00E4 00                 3011 	.db #0x00	; 0
   00E5 C1                 3012 	.db #0xC1	; 193
   00E6 81                 3013 	.db #0x81	; 129
   00E7 40                 3014 	.db #0x40	; 64
   00E8 00                 3015 	.db #0x00	; 0
   00E9 C1                 3016 	.db #0xC1	; 193
   00EA 81                 3017 	.db #0x81	; 129
   00EB 40                 3018 	.db #0x40	; 64
   00EC 01                 3019 	.db #0x01	; 1
   00ED C0                 3020 	.db #0xC0	; 192
   00EE 80                 3021 	.db #0x80	; 128
   00EF 41                 3022 	.db #0x41	; 65	A
   00F0 00                 3023 	.db #0x00	; 0
   00F1 C1                 3024 	.db #0xC1	; 193
   00F2 81                 3025 	.db #0x81	; 129
   00F3 40                 3026 	.db #0x40	; 64
   00F4 01                 3027 	.db #0x01	; 1
   00F5 C0                 3028 	.db #0xC0	; 192
   00F6 80                 3029 	.db #0x80	; 128
   00F7 41                 3030 	.db #0x41	; 65	A
   00F8 01                 3031 	.db #0x01	; 1
   00F9 C0                 3032 	.db #0xC0	; 192
   00FA 80                 3033 	.db #0x80	; 128
   00FB 41                 3034 	.db #0x41	; 65	A
   00FC 00                 3035 	.db #0x00	; 0
   00FD C1                 3036 	.db #0xC1	; 193
   00FE 81                 3037 	.db #0x81	; 129
   00FF 40                 3038 	.db #0x40	; 64
                    0100   3039 G$tabCRCLo$0$0 == .
   0100                    3040 _tabCRCLo:
   0100 00                 3041 	.db #0x00	; 0
   0101 C0                 3042 	.db #0xC0	; 192
   0102 C1                 3043 	.db #0xC1	; 193
   0103 01                 3044 	.db #0x01	; 1
   0104 C3                 3045 	.db #0xC3	; 195
   0105 03                 3046 	.db #0x03	; 3
   0106 02                 3047 	.db #0x02	; 2
   0107 C2                 3048 	.db #0xC2	; 194
   0108 C6                 3049 	.db #0xC6	; 198
   0109 06                 3050 	.db #0x06	; 6
   010A 07                 3051 	.db #0x07	; 7
   010B C7                 3052 	.db #0xC7	; 199
   010C 05                 3053 	.db #0x05	; 5
   010D C5                 3054 	.db #0xC5	; 197
   010E C4                 3055 	.db #0xC4	; 196
   010F 04                 3056 	.db #0x04	; 4
   0110 CC                 3057 	.db #0xCC	; 204
   0111 0C                 3058 	.db #0x0C	; 12
   0112 0D                 3059 	.db #0x0D	; 13
   0113 CD                 3060 	.db #0xCD	; 205
   0114 0F                 3061 	.db #0x0F	; 15
   0115 CF                 3062 	.db #0xCF	; 207
   0116 CE                 3063 	.db #0xCE	; 206
   0117 0E                 3064 	.db #0x0E	; 14
   0118 0A                 3065 	.db #0x0A	; 10
   0119 CA                 3066 	.db #0xCA	; 202
   011A CB                 3067 	.db #0xCB	; 203
   011B 0B                 3068 	.db #0x0B	; 11
   011C C9                 3069 	.db #0xC9	; 201
   011D 09                 3070 	.db #0x09	; 9
   011E 08                 3071 	.db #0x08	; 8
   011F C8                 3072 	.db #0xC8	; 200
   0120 D8                 3073 	.db #0xD8	; 216
   0121 18                 3074 	.db #0x18	; 24
   0122 19                 3075 	.db #0x19	; 25
   0123 D9                 3076 	.db #0xD9	; 217
   0124 1B                 3077 	.db #0x1B	; 27
   0125 DB                 3078 	.db #0xDB	; 219
   0126 DA                 3079 	.db #0xDA	; 218
   0127 1A                 3080 	.db #0x1A	; 26
   0128 1E                 3081 	.db #0x1E	; 30
   0129 DE                 3082 	.db #0xDE	; 222
   012A DF                 3083 	.db #0xDF	; 223
   012B 1F                 3084 	.db #0x1F	; 31
   012C DD                 3085 	.db #0xDD	; 221
   012D 1D                 3086 	.db #0x1D	; 29
   012E 1C                 3087 	.db #0x1C	; 28
   012F DC                 3088 	.db #0xDC	; 220
   0130 14                 3089 	.db #0x14	; 20
   0131 D4                 3090 	.db #0xD4	; 212
   0132 D5                 3091 	.db #0xD5	; 213
   0133 15                 3092 	.db #0x15	; 21
   0134 D7                 3093 	.db #0xD7	; 215
   0135 17                 3094 	.db #0x17	; 23
   0136 16                 3095 	.db #0x16	; 22
   0137 D6                 3096 	.db #0xD6	; 214
   0138 D2                 3097 	.db #0xD2	; 210
   0139 12                 3098 	.db #0x12	; 18
   013A 13                 3099 	.db #0x13	; 19
   013B D3                 3100 	.db #0xD3	; 211
   013C 11                 3101 	.db #0x11	; 17
   013D D1                 3102 	.db #0xD1	; 209
   013E D0                 3103 	.db #0xD0	; 208
   013F 10                 3104 	.db #0x10	; 16
   0140 F0                 3105 	.db #0xF0	; 240
   0141 30                 3106 	.db #0x30	; 48
   0142 31                 3107 	.db #0x31	; 49
   0143 F1                 3108 	.db #0xF1	; 241
   0144 33                 3109 	.db #0x33	; 51
   0145 F3                 3110 	.db #0xF3	; 243
   0146 F2                 3111 	.db #0xF2	; 242
   0147 32                 3112 	.db #0x32	; 50
   0148 36                 3113 	.db #0x36	; 54
   0149 F6                 3114 	.db #0xF6	; 246
   014A F7                 3115 	.db #0xF7	; 247
   014B 37                 3116 	.db #0x37	; 55
   014C F5                 3117 	.db #0xF5	; 245
   014D 35                 3118 	.db #0x35	; 53
   014E 34                 3119 	.db #0x34	; 52
   014F F4                 3120 	.db #0xF4	; 244
   0150 3C                 3121 	.db #0x3C	; 60
   0151 FC                 3122 	.db #0xFC	; 252
   0152 FD                 3123 	.db #0xFD	; 253
   0153 3D                 3124 	.db #0x3D	; 61
   0154 FF                 3125 	.db #0xFF	; 255
   0155 3F                 3126 	.db #0x3F	; 63
   0156 3E                 3127 	.db #0x3E	; 62
   0157 FE                 3128 	.db #0xFE	; 254
   0158 FA                 3129 	.db #0xFA	; 250
   0159 3A                 3130 	.db #0x3A	; 58
   015A 3B                 3131 	.db #0x3B	; 59
   015B FB                 3132 	.db #0xFB	; 251
   015C 39                 3133 	.db #0x39	; 57
   015D F9                 3134 	.db #0xF9	; 249
   015E F8                 3135 	.db #0xF8	; 248
   015F 38                 3136 	.db #0x38	; 56
   0160 28                 3137 	.db #0x28	; 40
   0161 E8                 3138 	.db #0xE8	; 232
   0162 E9                 3139 	.db #0xE9	; 233
   0163 29                 3140 	.db #0x29	; 41
   0164 EB                 3141 	.db #0xEB	; 235
   0165 2B                 3142 	.db #0x2B	; 43
   0166 2A                 3143 	.db #0x2A	; 42
   0167 EA                 3144 	.db #0xEA	; 234
   0168 EE                 3145 	.db #0xEE	; 238
   0169 2E                 3146 	.db #0x2E	; 46
   016A 2F                 3147 	.db #0x2F	; 47
   016B EF                 3148 	.db #0xEF	; 239
   016C 2D                 3149 	.db #0x2D	; 45
   016D ED                 3150 	.db #0xED	; 237
   016E EC                 3151 	.db #0xEC	; 236
   016F 2C                 3152 	.db #0x2C	; 44
   0170 E4                 3153 	.db #0xE4	; 228
   0171 24                 3154 	.db #0x24	; 36
   0172 25                 3155 	.db #0x25	; 37
   0173 E5                 3156 	.db #0xE5	; 229
   0174 27                 3157 	.db #0x27	; 39
   0175 E7                 3158 	.db #0xE7	; 231
   0176 E6                 3159 	.db #0xE6	; 230
   0177 26                 3160 	.db #0x26	; 38
   0178 22                 3161 	.db #0x22	; 34
   0179 E2                 3162 	.db #0xE2	; 226
   017A E3                 3163 	.db #0xE3	; 227
   017B 23                 3164 	.db #0x23	; 35
   017C E1                 3165 	.db #0xE1	; 225
   017D 21                 3166 	.db #0x21	; 33
   017E 20                 3167 	.db #0x20	; 32
   017F E0                 3168 	.db #0xE0	; 224
   0180 A0                 3169 	.db #0xA0	; 160
   0181 60                 3170 	.db #0x60	; 96
   0182 61                 3171 	.db #0x61	; 97	a
   0183 A1                 3172 	.db #0xA1	; 161
   0184 63                 3173 	.db #0x63	; 99	c
   0185 A3                 3174 	.db #0xA3	; 163
   0186 A2                 3175 	.db #0xA2	; 162
   0187 62                 3176 	.db #0x62	; 98	b
   0188 66                 3177 	.db #0x66	; 102	f
   0189 A6                 3178 	.db #0xA6	; 166
   018A A7                 3179 	.db #0xA7	; 167
   018B 67                 3180 	.db #0x67	; 103	g
   018C A5                 3181 	.db #0xA5	; 165
   018D 65                 3182 	.db #0x65	; 101	e
   018E 64                 3183 	.db #0x64	; 100	d
   018F A4                 3184 	.db #0xA4	; 164
   0190 6C                 3185 	.db #0x6C	; 108	l
   0191 AC                 3186 	.db #0xAC	; 172
   0192 AD                 3187 	.db #0xAD	; 173
   0193 6D                 3188 	.db #0x6D	; 109	m
   0194 AF                 3189 	.db #0xAF	; 175
   0195 6F                 3190 	.db #0x6F	; 111	o
   0196 6E                 3191 	.db #0x6E	; 110	n
   0197 AE                 3192 	.db #0xAE	; 174
   0198 AA                 3193 	.db #0xAA	; 170
   0199 6A                 3194 	.db #0x6A	; 106	j
   019A 6B                 3195 	.db #0x6B	; 107	k
   019B AB                 3196 	.db #0xAB	; 171
   019C 69                 3197 	.db #0x69	; 105	i
   019D A9                 3198 	.db #0xA9	; 169
   019E A8                 3199 	.db #0xA8	; 168
   019F 68                 3200 	.db #0x68	; 104	h
   01A0 78                 3201 	.db #0x78	; 120	x
   01A1 B8                 3202 	.db #0xB8	; 184
   01A2 B9                 3203 	.db #0xB9	; 185
   01A3 79                 3204 	.db #0x79	; 121	y
   01A4 BB                 3205 	.db #0xBB	; 187
   01A5 7B                 3206 	.db #0x7B	; 123
   01A6 7A                 3207 	.db #0x7A	; 122	z
   01A7 BA                 3208 	.db #0xBA	; 186
   01A8 BE                 3209 	.db #0xBE	; 190
   01A9 7E                 3210 	.db #0x7E	; 126
   01AA 7F                 3211 	.db #0x7F	; 127
   01AB BF                 3212 	.db #0xBF	; 191
   01AC 7D                 3213 	.db #0x7D	; 125
   01AD BD                 3214 	.db #0xBD	; 189
   01AE BC                 3215 	.db #0xBC	; 188
   01AF 7C                 3216 	.db #0x7C	; 124
   01B0 B4                 3217 	.db #0xB4	; 180
   01B1 74                 3218 	.db #0x74	; 116	t
   01B2 75                 3219 	.db #0x75	; 117	u
   01B3 B5                 3220 	.db #0xB5	; 181
   01B4 77                 3221 	.db #0x77	; 119	w
   01B5 B7                 3222 	.db #0xB7	; 183
   01B6 B6                 3223 	.db #0xB6	; 182
   01B7 76                 3224 	.db #0x76	; 118	v
   01B8 72                 3225 	.db #0x72	; 114	r
   01B9 B2                 3226 	.db #0xB2	; 178
   01BA B3                 3227 	.db #0xB3	; 179
   01BB 73                 3228 	.db #0x73	; 115	s
   01BC B1                 3229 	.db #0xB1	; 177
   01BD 71                 3230 	.db #0x71	; 113	q
   01BE 70                 3231 	.db #0x70	; 112	p
   01BF B0                 3232 	.db #0xB0	; 176
   01C0 50                 3233 	.db #0x50	; 80	P
   01C1 90                 3234 	.db #0x90	; 144
   01C2 91                 3235 	.db #0x91	; 145
   01C3 51                 3236 	.db #0x51	; 81	Q
   01C4 93                 3237 	.db #0x93	; 147
   01C5 53                 3238 	.db #0x53	; 83	S
   01C6 52                 3239 	.db #0x52	; 82	R
   01C7 92                 3240 	.db #0x92	; 146
   01C8 96                 3241 	.db #0x96	; 150
   01C9 56                 3242 	.db #0x56	; 86	V
   01CA 57                 3243 	.db #0x57	; 87	W
   01CB 97                 3244 	.db #0x97	; 151
   01CC 55                 3245 	.db #0x55	; 85	U
   01CD 95                 3246 	.db #0x95	; 149
   01CE 94                 3247 	.db #0x94	; 148
   01CF 54                 3248 	.db #0x54	; 84	T
   01D0 9C                 3249 	.db #0x9C	; 156
   01D1 5C                 3250 	.db #0x5C	; 92
   01D2 5D                 3251 	.db #0x5D	; 93
   01D3 9D                 3252 	.db #0x9D	; 157
   01D4 5F                 3253 	.db #0x5F	; 95
   01D5 9F                 3254 	.db #0x9F	; 159
   01D6 9E                 3255 	.db #0x9E	; 158
   01D7 5E                 3256 	.db #0x5E	; 94
   01D8 5A                 3257 	.db #0x5A	; 90	Z
   01D9 9A                 3258 	.db #0x9A	; 154
   01DA 9B                 3259 	.db #0x9B	; 155
   01DB 5B                 3260 	.db #0x5B	; 91
   01DC 99                 3261 	.db #0x99	; 153
   01DD 59                 3262 	.db #0x59	; 89	Y
   01DE 58                 3263 	.db #0x58	; 88	X
   01DF 98                 3264 	.db #0x98	; 152
   01E0 88                 3265 	.db #0x88	; 136
   01E1 48                 3266 	.db #0x48	; 72	H
   01E2 49                 3267 	.db #0x49	; 73	I
   01E3 89                 3268 	.db #0x89	; 137
   01E4 4B                 3269 	.db #0x4B	; 75	K
   01E5 8B                 3270 	.db #0x8B	; 139
   01E6 8A                 3271 	.db #0x8A	; 138
   01E7 4A                 3272 	.db #0x4A	; 74	J
   01E8 4E                 3273 	.db #0x4E	; 78	N
   01E9 8E                 3274 	.db #0x8E	; 142
   01EA 8F                 3275 	.db #0x8F	; 143
   01EB 4F                 3276 	.db #0x4F	; 79	O
   01EC 8D                 3277 	.db #0x8D	; 141
   01ED 4D                 3278 	.db #0x4D	; 77	M
   01EE 4C                 3279 	.db #0x4C	; 76	L
   01EF 8C                 3280 	.db #0x8C	; 140
   01F0 44                 3281 	.db #0x44	; 68	D
   01F1 84                 3282 	.db #0x84	; 132
   01F2 85                 3283 	.db #0x85	; 133
   01F3 45                 3284 	.db #0x45	; 69	E
   01F4 87                 3285 	.db #0x87	; 135
   01F5 47                 3286 	.db #0x47	; 71	G
   01F6 46                 3287 	.db #0x46	; 70	F
   01F7 86                 3288 	.db #0x86	; 134
   01F8 82                 3289 	.db #0x82	; 130
   01F9 42                 3290 	.db #0x42	; 66	B
   01FA 43                 3291 	.db #0x43	; 67	C
   01FB 83                 3292 	.db #0x83	; 131
   01FC 41                 3293 	.db #0x41	; 65	A
   01FD 81                 3294 	.db #0x81	; 129
   01FE 80                 3295 	.db #0x80	; 128
   01FF 40                 3296 	.db #0x40	; 64
                           3297 	.area XINIT   (CODE)
                           3298 	.area CABS    (ABS,CODE)
